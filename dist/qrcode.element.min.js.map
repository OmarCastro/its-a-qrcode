{
  "version": 3,
  "sources": ["esm/utils/deep-freeze.util.js", "esm/error-correction/qr-ec-block-table.constants.js", "esm/error-correction/ec-level.js", "esm/error-correction/qr-ec-block.utils.js", "esm/utils/pattern-position-table.constants.js", "esm/utils/qr-util.js", "esm/utils/qr-bit-buffer.js", "esm/utils/qr-math.util.js", "esm/utils/qr-polynomial.js", "esm/error-correction/ec-polynomial.js", "esm/utils/create-data.util.js", "esm/utils/utf8-to-jis-table.constants.js", "esm/utils/utf8-to-jis-table.js", "esm/utils/text-decode-encode.util.js", "esm/modes/kanji.mode.js", "esm/modes/byte.mode.js", "esm/modes/number.mode.js", "esm/modes/alphanum.mode.js", "esm/modes/mode-utils.util.js", "esm/qr-code.js", "esm/render/canvas-2d-context.render.js", "esm/render/data-url-canvas.render.js", "esm/utils/escape-xml.util.js", "esm/render/img-tag.render.js", "esm/render/svg.render.js", "esm/web-component/qr-code.element.css.generated.js", "esm/web-component/qr-code.element.js", "esm/entrypoint/browser.js"],
  "sourcesContent": ["/**\n * Recursively deep freeze an object with circular references\n * No shallow-frozen references expeced in the project, so no need to check for it\n * @template T\n * @param {DeepFrozen<T>} x - object structure to freeze\n * @returns {DeepFrozen<T>} - frozen object structure\n */\nexport function deepFreeze (x) {\n  Object.freeze(x)\n  x && Object.values(x).filter(x => !Object.isFrozen(x)).forEach(deepFreeze)\n  return x\n}\n\n/**\n * @template T\n * @typedef {T extends Function | boolean | number | string | null | undefined ? T :\n *  T extends Array<infer U> ? ReadonlyArray<DeepFrozen<U>> :\n *  T extends Map<infer K, infer V> ? ReadonlyMap<DeepFrozen<K>, DeepFrozen<V>> :\n *  T extends Set<infer S> ? ReadonlySet<DeepFrozen<S>> :\n * {readonly [P in keyof T]: DeepFrozen<T[P]>}\n * } DeepFrozen<T>\n *\n *  This types tells that the object and all their properties, recursively, are immutable.\n */\n", "/* eslint-disable no-multi-spaces -- tabular view of data present */\nimport { deepFreeze } from '../utils/deep-freeze.util.js'\n\n/**\n * The error correction block table.\n *\n * There are 3 to 6 elements per version, in groups of 3. In each group, the first number indicate the number of blocks, then the total width\u00B9, and finally the data width\u00B2.\n *\n * \u00B9 total width - total codewords count ( total width = data width + EC width\u00B3) of a block\n * \u00B2 data width - data codewords count\n * \u00B3 EC width - Error correction codewords count\n */\nexport const EC_BLOCK_TABLE = deepFreeze([\n  // EC          M (bit 00)                L (bit 01)                   H (bit 10)                Q (bit 11 )\n  /* Version */\n  /*    1    */  [1, 26, 16],              [1, 26, 19],                 [1, 26, 9],               [1, 26, 13],\n  /*    2    */  [1, 44, 28],              [1, 44, 34],                 [1, 44, 16],              [1, 44, 22],\n  /*    3    */  [1, 70, 44],              [1, 70, 55],                 [2, 35, 13],              [2, 35, 17],\n  /*    4    */  [2, 50, 32],              [1, 100, 80],                [4, 25, 9],               [2, 50, 24],\n  /*    5    */  [2, 67, 43],              [1, 134, 108],               [2, 33, 11, 2, 34, 12],   [2, 33, 15, 2, 34, 16],\n  /*    6    */  [4, 43, 27],              [2, 86, 68],                 [4, 43, 15],              [4, 43, 19],\n  /*    7    */  [4, 49, 31],              [2, 98, 78],                 [4, 39, 13, 1, 40, 14],   [2, 32, 14, 4, 33, 15],\n  /*    8    */  [2, 60, 38, 2, 61, 39],   [2, 121, 97],                [4, 40, 14, 2, 41, 15],   [4, 40, 18, 2, 41, 19],\n  /*    9    */  [3, 58, 36, 2, 59, 37],   [2, 146, 116],               [4, 36, 12, 4, 37, 13],   [4, 36, 16, 4, 37, 17],\n  /*   10    */  [4, 69, 43, 1, 70, 44],   [2, 86, 68, 2, 87, 69],      [6, 43, 15, 2, 44, 16],   [6, 43, 19, 2, 44, 20],\n  /*   11    */  [1, 80, 50, 4, 81, 51],   [4, 101, 81],                [3, 36, 12, 8, 37, 13],   [4, 50, 22, 4, 51, 23],\n  /*   12    */  [6, 58, 36, 2, 59, 37],   [2, 116, 92, 2, 117, 93],    [7, 42, 14, 4, 43, 15],   [4, 46, 20, 6, 47, 21],\n  /*   13    */  [8, 59, 37, 1, 60, 38],   [4, 133, 107],               [12, 33, 11, 4, 34, 12],  [8, 44, 20, 4, 45, 21],\n  /*   14    */  [4, 64, 40, 5, 65, 41],   [3, 145, 115, 1, 146, 116],  [11, 36, 12, 5, 37, 13],  [11, 36, 16, 5, 37, 17],\n  /*   15    */  [5, 65, 41, 5, 66, 42],   [5, 109, 87, 1, 110, 88],    [11, 36, 12, 7, 37, 13],  [5, 54, 24, 7, 55, 25],\n  /*   16    */  [7, 73, 45, 3, 74, 46],   [5, 122, 98, 1, 123, 99],    [3, 45, 15, 13, 46, 16],  [15, 43, 19, 2, 44, 20],\n  /*   17    */  [10, 74, 46, 1, 75, 47],  [1, 135, 107, 5, 136, 108],  [2, 42, 14, 17, 43, 15],  [1, 50, 22, 15, 51, 23],\n  /*   18    */  [9, 69, 43, 4, 70, 44],   [5, 150, 120, 1, 151, 121],  [2, 42, 14, 19, 43, 15],  [17, 50, 22, 1, 51, 23],\n  /*   19    */  [3, 70, 44, 11, 71, 45],  [3, 141, 113, 4, 142, 114],  [9, 39, 13, 16, 40, 14],  [17, 47, 21, 4, 48, 22],\n  /*   20    */  [3, 67, 41, 13, 68, 42],  [3, 135, 107, 5, 136, 108],  [15, 43, 15, 10, 44, 16], [15, 54, 24, 5, 55, 25],\n  /*   21    */  [17, 68, 42],             [4, 144, 116, 4, 145, 117],  [19, 46, 16, 6, 47, 17],  [17, 50, 22, 6, 51, 23],\n  /*   22    */  [17, 74, 46],             [2, 139, 111, 7, 140, 112],  [34, 37, 13],             [7, 54, 24, 16, 55, 25],\n  /*   23    */  [4, 75, 47, 14, 76, 48],  [4, 151, 121, 5, 152, 122],  [16, 45, 15, 14, 46, 16], [11, 54, 24, 14, 55, 25],\n  /*   24    */  [6, 73, 45, 14, 74, 46],  [6, 147, 117, 4, 148, 118],  [30, 46, 16, 2, 47, 17],  [11, 54, 24, 16, 55, 25],\n  /*   25    */  [8, 75, 47, 13, 76, 48],  [8, 132, 106, 4, 133, 107],  [22, 45, 15, 13, 46, 16], [7, 54, 24, 22, 55, 25],\n  /*   26    */  [19, 74, 46, 4, 75, 47],  [10, 142, 114, 2, 143, 115], [33, 46, 16, 4, 47, 17],  [28, 50, 22, 6, 51, 23],\n  /*   27    */  [22, 73, 45, 3, 74, 46],  [8, 152, 122, 4, 153, 123],  [12, 45, 15, 28, 46, 16], [8, 53, 23, 26, 54, 24],\n  /*   28    */  [3, 73, 45, 23, 74, 46],  [3, 147, 117, 10, 148, 118], [11, 45, 15, 31, 46, 16], [4, 54, 24, 31, 55, 25],\n  /*   29    */  [21, 73, 45, 7, 74, 46],  [7, 146, 116, 7, 147, 117],  [19, 45, 15, 26, 46, 16], [1, 53, 23, 37, 54, 24],\n  /*   30    */  [19, 75, 47, 10, 76, 48], [5, 145, 115, 10, 146, 116], [23, 45, 15, 25, 46, 16], [15, 54, 24, 25, 55, 25],\n  /*   31    */  [2, 74, 46, 29, 75, 47],  [13, 145, 115, 3, 146, 116], [23, 45, 15, 28, 46, 16], [42, 54, 24, 1, 55, 25],\n  /*   32    */  [10, 74, 46, 23, 75, 47], [17, 145, 115],              [19, 45, 15, 35, 46, 16], [10, 54, 24, 35, 55, 25],\n  /*   33    */  [14, 74, 46, 21, 75, 47], [17, 145, 115, 1, 146, 116], [11, 45, 15, 46, 46, 16], [29, 54, 24, 19, 55, 25],\n  /*   34    */  [14, 74, 46, 23, 75, 47], [13, 145, 115, 6, 146, 116], [59, 46, 16, 1, 47, 17],  [44, 54, 24, 7, 55, 25],\n  /*   35    */  [12, 75, 47, 26, 76, 48], [12, 151, 121, 7, 152, 122], [22, 45, 15, 41, 46, 16], [39, 54, 24, 14, 55, 25],\n  /*   36    */  [6, 75, 47, 34, 76, 48],  [6, 151, 121, 14, 152, 122], [2, 45, 15, 64, 46, 16],  [46, 54, 24, 10, 55, 25],\n  /*   37    */  [29, 74, 46, 14, 75, 47], [17, 152, 122, 4, 153, 123], [24, 45, 15, 46, 46, 16], [49, 54, 24, 10, 55, 25],\n  /*   38    */  [13, 74, 46, 32, 75, 47], [4, 152, 122, 18, 153, 123], [42, 45, 15, 32, 46, 16], [48, 54, 24, 14, 55, 25],\n  /*   39    */  [40, 75, 47, 7, 76, 48],  [20, 147, 117, 4, 148, 118], [10, 45, 15, 67, 46, 16], [43, 54, 24, 22, 55, 25],\n  /*   40    */  [18, 75, 47, 31, 76, 48], [19, 148, 118, 6, 149, 119], [20, 45, 15, 61, 46, 16], [34, 54, 24, 34, 55, 25],\n])\n", "export const CORRECTION_LEVEL_L = 1\nexport const CORRECTION_LEVEL_M = 0\nexport const CORRECTION_LEVEL_Q = 3\nexport const CORRECTION_LEVEL_H = 2\n\nconst correctionLevelNames = ['Medium', 'Low', 'High', 'Quartile']\n\n/** @type {Record<string, { bit: number, name: string }>} */\nconst correctionLevelMap = correctionLevelNames.reduce((acc, name, bit) => {\n  const result = { bit, name }\n  return { ...acc, [name.toUpperCase()]: result, [name[0]]: result }\n}, {})\n\n/**\n * Get error correction level from string\n * @param {string} string - correction level text\n * @throws error on invalid correction level\n * @returns {{ bit: number }} correction level object\n */\nexport function fromString (string) {\n  if (typeof string !== 'string') {\n    throw new Error(`expected string instead of ${typeof string}`)\n  }\n\n  const result = correctionLevelMap[string.toUpperCase()]\n  if (!result) {\n    const validKeys = [1, 0, 3, 2].flatMap(idx => [correctionLevelNames[idx][0], correctionLevelNames[idx]]).map(name => `\"${name}\"`).join(', ')\n    throw new Error(`Unknown Error Correction Level: \"${string}\" expected one of the following values (case insensitive): ${validKeys}`)\n  }\n  return result\n}\n\n/**\n * Checks if error correction level is valid.\n *\n * Error corection is valid if `string` is one of the following values (case insensitive): `L`,`Low`,`M`,`Medium`,`Q`,`Quartile`,`H` and `High`\n * @param {string} string - target string\n * @returns {boolean} true if correction level is valid, false otherwise\n */\nexport function isValid (string) {\n  if (typeof string !== 'string') {\n    return false\n  }\n  return Object.hasOwn(correctionLevelMap, string.toUpperCase())\n}\n", "import { EC_BLOCK_TABLE } from './qr-ec-block-table.constants.js'\nimport { CORRECTION_LEVEL_M, CORRECTION_LEVEL_Q } from './ec-level.js'\n\n/**\n * @param {number} totalCount - total codewords capacity\n * @param {number} dataCount - data codewords capacity\n * @returns {Readonly<ECBlock>} created Error Correction block object\n */\nconst ECBlock = (totalCount, dataCount) => Object.freeze({ totalCount, dataCount, ecCount: totalCount - dataCount })\n\n/**\n * @param {number} typeNumber - qr code version\n * @param {number} errorCorrectionLevel - numeric value of error Correction Level\n */\nconst queryECBlocks = function (typeNumber, errorCorrectionLevel) {\n  const index = (typeNumber - 1) * 4 + errorCorrectionLevel\n  const rawEcBlock = EC_BLOCK_TABLE[index]\n\n  const length = rawEcBlock.length / 3\n\n  const list = []\n\n  for (let i = 0; i < length; i += 1) {\n    const count = rawEcBlock[i * 3 + 0]\n    const totalCount = rawEcBlock[i * 3 + 1]\n    const dataCount = rawEcBlock[i * 3 + 2]\n\n    for (let j = 0; j < count; j += 1) {\n      list.push(ECBlock(totalCount, dataCount))\n    }\n  }\n\n  return Object.freeze(list)\n}\n\n/**\n * @param {number} typeNumber - qr code version\n * @param {number} errorCorrectionLevel - numeric value of error Correction Level\n * @returns {ECBlocksInfo} block info\n */\nfunction buildECBlocksInfo (typeNumber, errorCorrectionLevel) {\n  const blocks = queryECBlocks(typeNumber, errorCorrectionLevel)\n  let totalCount = 0\n  let totalDcCount = 0\n  let totalEcCount = 0\n  let maxDcCount = 0\n  let maxEcCount = 0\n\n  for (const block of blocks) {\n    totalCount += block.totalCount\n    totalDcCount += block.dataCount\n    totalEcCount += block.ecCount\n    maxDcCount = Math.max(maxDcCount, block.dataCount)\n    maxEcCount = Math.max(maxEcCount, block.ecCount)\n  }\n\n  return Object.freeze({ blocks, totalCount, totalDcCount, totalEcCount, maxDcCount, maxEcCount })\n}\n\n/**\n * The idea was to pre-calculate everything on the EC block table, but it is better to memoize to reduce JS hydration\n */\nconst memoEcBlockInfo = /** @type {ECBlocksInfo[]} */([])\n\n/**\n * @param {number} typeNumber - qr code version\n * @param {number} errorCorrectionLevel - numeric value of error Correction Level\n * @returns {ECBlocksInfo} error correction blocks information\n */\nexport function ECBlocksInfo (typeNumber, errorCorrectionLevel) {\n  versionEcCheck(typeNumber, errorCorrectionLevel)\n  const index = (typeNumber - 1) * 4 + errorCorrectionLevel\n  const memo = memoEcBlockInfo[index]\n  if (memo) {\n    return memo\n  }\n  const result = buildECBlocksInfo(typeNumber, errorCorrectionLevel)\n  memoEcBlockInfo[index] = result\n  return result\n}\n\n/**\n * @param {number} typeNumber - qr code version\n * @param {number} errorCorrectionLevel - numeric value of error Correction Level\n */\nfunction versionEcCheck (typeNumber, errorCorrectionLevel) {\n  if (\n    typeof errorCorrectionLevel !== 'number' ||\n    typeof typeNumber !== 'number' ||\n    errorCorrectionLevel < CORRECTION_LEVEL_M ||\n    errorCorrectionLevel > CORRECTION_LEVEL_Q ||\n    typeNumber < 1 ||\n    typeNumber > 40\n  ) {\n    throw Error(`bad rs block @ typeNumber:${typeNumber}', errorCorrectionLevel: ${errorCorrectionLevel}`)\n  }\n}\n\n/**\n * @typedef {object} ECBlocksInfoData\n * @property {ECBlocks} blocks - total codewords count capacity\n * @property {number} totalCount - total codewords count\n * @property {number} totalDcCount - total data codewords count\n * @property {number} totalEcCount - total error correction codewords count\n * @property {number} maxDcCount - max data codewords count capacity\n * @property {number} maxEcCount - max error codewords count capacity\n */\n\n/**\n * @typedef {Readonly<ECBlocksInfoData>} ECBlocksInfo Error Correction blocks information\n */\n\n/**\n * @typedef {object} ECBlockData - Error Correction block\n * @property {number} totalCount - total codewords count capacity\n * @property {number} dataCount - data codewords count capacity\n * @property {number} ecCount - error correction codewords count capacity\n */\n\n/**\n * @typedef {Readonly<ECBlockData>} ECBlock Error Correction block\n */\n\n/**\n * @typedef {readonly ECBlock[]} ECBlocks Error Correction blocks\n */\n", "import { deepFreeze } from './deep-freeze.util.js'\n\nexport const PATTERN_POSITION_TABLE = deepFreeze([\n  [],\n  [6, 18],\n  [6, 22],\n  [6, 26],\n  [6, 30],\n  [6, 34],\n  [6, 22, 38],\n  [6, 24, 42],\n  [6, 26, 46],\n  [6, 28, 50],\n  [6, 30, 54],\n  [6, 32, 58],\n  [6, 34, 62],\n  [6, 26, 46, 66],\n  [6, 26, 48, 70],\n  [6, 26, 50, 74],\n  [6, 30, 54, 78],\n  [6, 30, 56, 82],\n  [6, 30, 58, 86],\n  [6, 34, 62, 90],\n  [6, 28, 50, 72, 94],\n  [6, 26, 50, 74, 98],\n  [6, 30, 54, 78, 102],\n  [6, 28, 54, 80, 106],\n  [6, 32, 58, 84, 110],\n  [6, 30, 58, 86, 114],\n  [6, 34, 62, 90, 118],\n  [6, 26, 50, 74, 98, 122],\n  [6, 30, 54, 78, 102, 126],\n  [6, 26, 52, 78, 104, 130],\n  [6, 30, 56, 82, 108, 134],\n  [6, 34, 60, 86, 112, 138],\n  [6, 30, 58, 86, 114, 142],\n  [6, 34, 62, 90, 118, 146],\n  [6, 30, 54, 78, 102, 126, 150],\n  [6, 24, 50, 76, 102, 128, 154],\n  [6, 28, 54, 80, 106, 132, 158],\n  [6, 32, 58, 84, 110, 136, 162],\n  [6, 26, 54, 82, 110, 138, 166],\n  [6, 30, 58, 86, 114, 142, 170],\n])\n", "import { PATTERN_POSITION_TABLE } from './pattern-position-table.constants.js'\nimport { MODE_8BIT_BYTE, MODE_ALPHA_NUM, MODE_KANJI, MODE_NUMBER } from '../modes/mode-bits.constants.js'\n\n/**\n * Get BCH code digit\n * @param {number} data - numeric data\n */\nfunction getBCHDigit (data) {\n  let digit = 0\n  while (data !== 0) {\n    digit += 1\n    data >>>= 1\n  }\n  return digit\n};\n\nconst G15 = 0b000010100110111\nconst G18 = 0b001111100100101\nconst G15_MASK = 0b101010000010010\n\n/**\n * Get type info using Reed\u2013Solomon error correction with Bose\u2013Chaudhuri\u2013Hocquenghem codes (BCH codes)\n * @param {number} data - masked error Correction Level info\n * @returns {number} bits of BHC code of type info\n */\nexport function getBCHTypeInfo (data) {\n  let d = data << 10\n  while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\n    d ^= (G15 << (getBCHDigit(d) - getBCHDigit(G15)))\n  }\n  return ((data << 10) | d) ^ G15_MASK\n};\n\n/**\n * @param {number} data - QR code version\n * @returns {number} bits of BHC code of QR code version\n */\nexport function getBCHTypeNumber (data) {\n  let d = data << 12\n  while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\n    d ^= (G18 << (getBCHDigit(d) - getBCHDigit(G18)))\n  }\n  return (data << 12) | d\n};\n\n/**\n * @param {number} typeNumber - QR code version\n * @returns {readonly number[]} pattern positions\n */\nexport const getPatternPosition = (typeNumber) => PATTERN_POSITION_TABLE[typeNumber - 1]\n\n/** @type {((i: number, j: number) => boolean)[]} */\nconst maskPatternFunctions = [\n  (i, j) => (i + j) % 2 === 0, // QRMaskPattern.PATTERN000\n  (i, _) => i % 2 === 0, // QRMaskPattern.PATTERN001\n  (_, j) => j % 3 === 0, // QRMaskPattern.PATTERN010\n  (i, j) => (i + j) % 3 === 0, // QRMaskPattern.PATTERN011\n  (i, j) => (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0, // QRMaskPattern.PATTERN100\n  (i, j) => (i * j) % 2 + (i * j) % 3 === 0, // QRMaskPattern.PATTERN101\n  (i, j) => ((i * j) % 2 + (i * j) % 3) % 2 === 0, // QRMaskPattern.PATTERN110\n  (i, j) => ((i * j) % 3 + (i + j) % 2) % 2 === 0, // QRMaskPattern.PATTERN110\n]\n\n/**\n * @param {number} maskPattern - mask pattern value\n * @returns {((i: number, j: number) => boolean)} mask pattern function\n */\nexport function getMaskFunction (maskPattern) {\n  const result = maskPatternFunctions[maskPattern]\n  if (!result) {\n    throw Error(`bad maskPattern: ${maskPattern}`)\n  }\n  return result\n};\n\n/**\n * Get bit length to write on QR code data\n * @param {number} mode - mode balue\n * @param {number} type - qr version\n * @returns {number} bit length\n */\nexport function getLengthInBits (mode, type) {\n  if (type >= 1 && type < 10) { // 1 - 9\n    switch (mode) {\n      case MODE_NUMBER : return 10\n      case MODE_ALPHA_NUM : return 9\n      case MODE_8BIT_BYTE : return 8\n      case MODE_KANJI : return 8\n      default :\n        throw Error(`invalid mode: ${mode}`)\n    }\n  } else if (type < 27) { // 10 - 26\n    switch (mode) {\n      case MODE_NUMBER : return 12\n      case MODE_ALPHA_NUM : return 11\n      case MODE_8BIT_BYTE : return 16\n      case MODE_KANJI : return 10\n      default :\n        throw Error(`invalid mode: ${mode}`)\n    }\n  } else if (type < 41) { // 27 - 40\n    switch (mode) {\n      case MODE_NUMBER : return 14\n      case MODE_ALPHA_NUM : return 13\n      case MODE_8BIT_BYTE : return 16\n      case MODE_KANJI : return 12\n      default :\n        throw Error(`invalid mode: ${mode}`)\n    }\n  } else {\n    throw Error(`invalid type: ${type}`)\n  }\n};\n", "export class QrBitBuffer {\n  /** @type {number[]} */\n  #byteBuffer = []\n  #bitLength = 0\n\n  /**\n   * Append bit sequence to bit buffer\n   * @param {number} num - bit sequence as number\n   * @param {number} length - bit sequence length\n   */\n  put (num, length) {\n    const byteBuffer = this.#byteBuffer\n    const bitLength = this.#bitLength\n    const newBitLength = bitLength + length\n    const newBufferLenght = (newBitLength + 7) >> 3\n\n    let restBits = Math.min((byteBuffer.length << 3) - bitLength, length)\n    let bufIndex = bitLength >> 3\n    while (byteBuffer.length < newBufferLenght) {\n      byteBuffer.push(0)\n    }\n    let i = 0\n    if (restBits === 0) {\n      restBits = Math.min(8, length)\n    }\n    while (i < length) {\n      const shiftLeft = bufIndex === newBufferLenght - 1 ? (8 - restBits) : 0\n      byteBuffer[bufIndex] |= (num << shiftLeft >>> (length - i - restBits)) & (0xff)\n      i += restBits\n      bufIndex++\n      restBits = Math.min(8, length - i)\n    }\n    this.#bitLength = newBitLength\n  };\n\n  get byteBuffer () {\n    return this.#byteBuffer.slice()\n  }\n\n  toByteArray () {\n    return Uint8Array.from(this.#byteBuffer)\n  }\n\n  get bitLength () {\n    return this.#bitLength\n  }\n\n  /**\n   * Get bit value at index, value is either 0 or 1\n   * @param {number} index - index position\n   * @returns {number} bit value\n   */\n  getBitAt (index) {\n    const bufIndex = index >> 3\n    return (this.#byteBuffer[bufIndex] >>> (7 - index & 0b111)) & 1\n  }\n\n  /**\n   * @param {0|1|boolean} bit bit to put\n   */\n  putBit (bit) {\n    const byteBuffer = this.#byteBuffer\n    const bitLength = this.#bitLength\n    const bufIndex = bitLength >> 3\n    if (byteBuffer.length <= bufIndex) {\n      byteBuffer.push(0)\n    }\n\n    if (bit) {\n      byteBuffer[bufIndex] |= (0x80 >>> (bitLength & 0b111))\n    }\n    this.#bitLength += 1\n  }\n}\n", "/**\n * The Galois field exponent table.\n */\nconst EXP_TABLE = new Uint8Array(256)\n/**\n * The Galois field logarithmic table.\n */\nconst LOG_TABLE = new Uint8Array(256)\n\n// fill exponent table\nfor (let i = 0; i < 8; i += 1) {\n  EXP_TABLE[i] = 1 << i\n}\nfor (let i = 8; i < 256; i += 1) {\n  EXP_TABLE[i] = EXP_TABLE[i - 4] ^\n    EXP_TABLE[i - 5] ^\n    EXP_TABLE[i - 6] ^\n    EXP_TABLE[i - 8]\n}\n// fill logarithmic table\nfor (let i = 0; i < 255; i += 1) {\n  LOG_TABLE[EXP_TABLE[i]] = i\n}\n\n/**\n * @param {number} n - input\n * @returns {number} logarithm of {@link n} using Galois field logarithmic table\n */\nexport function glog (n) {\n  if (n < 1) { throw Error(`glog(${n})`) }\n  return LOG_TABLE[n]\n}\n\n/**\n * @param {number} n - input\n * @returns {number} exponential of {@link n} using Galois field exponent table\n */export function gexp (n) {\n  while (n < 0) { n += 255 }\n  while (n >= 256) { n -= 255 }\n  return EXP_TABLE[n]\n}\n", "import { gexp, glog } from './qr-math.util.js'\n\nclass QRPolynomial {\n  /** @type {readonly number[]} */\n  array\n\n  /**\n   * @param {ArrayLike<number>} num - polinomial value\n   * @param {number} shift - shift value\n   */\n  constructor (num, shift = 0) {\n    let offset = 0\n    const numLen = num.length\n\n    while (offset < numLen && num[offset] === 0) {\n      offset += 1\n    }\n    const lengthAfterOffset = numLen - offset\n    const array = new Array(lengthAfterOffset + shift)\n    for (let i = 0; i < lengthAfterOffset; i += 1) {\n      array[i] = num[i + offset]\n    }\n\n    this.array = Object.freeze(array)\n    return Object.freeze(this)\n  }\n\n  /** @param {number} index - value position */\n  getAt (index) {\n    return this.array[index]\n  }\n\n  get length () {\n    return this.array.length\n  }\n\n  /**\n   * @param {QRPolynomial} other - right side of operation\n   * @returns {QRPolynomial} multiplication result\n   */\n  multiply (other) {\n    const { length, array } = this\n    const { length: otherLength, array: otherArray } = other\n\n    const num = new Array(length + otherLength - 1)\n\n    for (let i = 0; i < length; i += 1) {\n      for (let j = 0; j < otherLength; j += 1) {\n        num[i + j] ^= gexp(glog(array[i]) + glog(otherArray[j]))\n      }\n    }\n\n    return new QRPolynomial(num, 0)\n  }\n\n  /**\n   * @param {Readonly<QRPolynomial>} other - right side of operation\n   * @returns {QRPolynomial} mod result\n   */\n  mod (other) {\n    const { length, array } = this\n    const { length: otherLength, array: otherArray } = other\n\n    if (length - otherLength < 0) {\n      return this\n    }\n\n    const ratio = glog(array[0]) - glog(otherArray[0])\n\n    const num = Uint32Array.from(array)\n\n    for (let i = 0; i < otherLength; i += 1) {\n      num[i] ^= gexp(glog(otherArray[i]) + ratio)\n    }\n\n    // recursive call\n    return new QRPolynomial(num, 0).mod(other)\n  };\n}\n\n/**\n * Transforms array into a polynomial\n * @param {ArrayLike<number>} num - polynomial values\n * @param {number} [shift] - shift value\n * @returns {Readonly<QRPolynomial>} polynomial\n */\nexport function QrPolynomial (num, shift = 0) {\n  return new QRPolynomial(num, shift)\n};\n", "import { QrPolynomial } from '../utils/qr-polynomial'\nimport { gexp } from '../utils/qr-math.util'\n\n/**\n * memoize getErrorCorrectPolynomial as it is called multiple times when generating QR Code\n */\nconst memoECPolynomials = [\n  QrPolynomial([1], 0),\n]\n\n/**\n * @param {number} errorCorrectLength - error correction codeword count\n * @returns {ReturnType<QrPolynomial>} error correction polynomial\n */\nexport function getErrorCorrectPolynomial (errorCorrectLength) {\n  if (memoECPolynomials.length > errorCorrectLength) {\n    return memoECPolynomials[errorCorrectLength]\n  }\n  const lastIndex = memoECPolynomials.length - 1\n  let polynomial = memoECPolynomials[lastIndex]\n  for (let i = lastIndex; i < errorCorrectLength; i += 1) {\n    polynomial = polynomial.multiply(QrPolynomial([1, gexp(i)], 0))\n    memoECPolynomials.push(polynomial)\n  }\n  return polynomial\n};\n", "import { QrBitBuffer } from './qr-bit-buffer.js'\nimport { ECBlocksInfo } from '../error-correction/qr-ec-block.utils.js'\nimport { getLengthInBits } from './qr-util.js'\nimport { getErrorCorrectPolynomial } from '../error-correction/ec-polynomial.js'\nimport { QrPolynomial } from './qr-polynomial.js'\n\nconst PAD0 = 0xEC\nconst PAD1 = 0x11\n\n/**\n *\n * @param {number} typeNumber - qr code version\n * @param {number} errorCorrectionLevel - error correction level\n * @param {readonly import (\"../modes/mode-bits.constants.js\").ModeObject[]} dataList - qr code raw data\n * @returns {number[]} qr code byte data\n */\nexport function createData (typeNumber, errorCorrectionLevel, dataList) {\n  const blocksInfo = ECBlocksInfo(typeNumber, errorCorrectionLevel)\n  const buffer = new QrBitBuffer()\n\n  for (const data of dataList) {\n    buffer.put(data.mode, 4)\n    buffer.put(data.length, getLengthInBits(data.mode, typeNumber))\n    data.write(buffer)\n  }\n\n  const totalDataCount = blocksInfo.totalDcCount\n\n  if (buffer.bitLength > totalDataCount * 8) {\n    throw Error(`code length overflow. (${buffer.bitLength} > ${totalDataCount * 8})`)\n  }\n\n  // end code\n  if (buffer.bitLength + 4 <= totalDataCount * 8) {\n    buffer.put(0, 4)\n  }\n\n  // padding\n  while (buffer.bitLength % 8 !== 0) {\n    buffer.putBit(0)\n  }\n\n  // padding\n  while (true) {\n    if (buffer.bitLength >= totalDataCount * 8) {\n      break\n    }\n    buffer.put(PAD0, 8)\n\n    if (buffer.bitLength >= totalDataCount * 8) {\n      break\n    }\n    buffer.put(PAD1, 8)\n  }\n\n  return createBytes(buffer, blocksInfo)\n};\n\n/**\n * @param {QrBitBuffer} buffer - data buffer\n * @param {import('../error-correction/qr-ec-block.utils.js').ECBlocksInfo} blocksInfo - error correction blocks info\n */\nfunction createBytes (buffer, blocksInfo) {\n  const { maxDcCount, maxEcCount, blocks: ecBlocks, totalCount: totalCodeCount } = blocksInfo\n  const { ecdata, dcdata } = createCodewordsData(buffer, ecBlocks)\n\n  /** @type {number[]} */\n  const data = new Array(totalCodeCount)\n  let index = 0\n\n  for (let i = 0; i < maxDcCount; i += 1) {\n    for (let r = 0; r < ecBlocks.length; r += 1) {\n      if (i < dcdata[r].length) {\n        data[index] = dcdata[r][i]\n        index += 1\n      }\n    }\n  }\n\n  for (let i = 0; i < maxEcCount; i += 1) {\n    for (let r = 0; r < ecBlocks.length; r += 1) {\n      if (i < ecdata[r].length) {\n        data[index] = ecdata[r][i]\n        index += 1\n      }\n    }\n  }\n\n  return data\n};\n\n/**\n * @param {QrBitBuffer} buffer - - data buffer\n * @param {import('../error-correction/qr-ec-block.utils.js').ECBlocks} ecBlocks - error correction blocks\n */\nfunction createCodewordsData (buffer, ecBlocks) {\n  let offset = 0\n\n  /** @type {number[][]} */\n  const dcdata = new Array(ecBlocks.length)\n  /** @type {number[][]} */\n  const ecdata = new Array(ecBlocks.length)\n\n  for (let r = 0; r < ecBlocks.length; r += 1) {\n    const dcCount = ecBlocks[r].dataCount\n    const ecCount = ecBlocks[r].ecCount\n\n    dcdata[r] = new Array(dcCount)\n\n    for (let i = 0, e = dcdata[r].length; i < e; i += 1) {\n      dcdata[r][i] = 0xff & buffer.byteBuffer[i + offset]\n    }\n    offset += dcCount\n\n    const rsPoly = getErrorCorrectPolynomial(ecCount)\n    const rawPoly = QrPolynomial(dcdata[r], rsPoly.length - 1)\n\n    const modPoly = rawPoly.mod(rsPoly)\n    ecdata[r] = new Array(rsPoly.length - 1)\n    for (let i = 0; i < ecdata[r].length; i += 1) {\n      const modIndex = i + modPoly.length - ecdata[r].length\n      ecdata[r][i] = (modIndex >= 0) ? modPoly.getAt(modIndex) : 0\n    }\n  }\n\n  return { ecdata, dcdata }\n};\n", "export default {\n  21: '772h>1e,776A>1f',\n  2121: '44CA>2,77yM,77yO,44O7,77ya>1,77yf,77yB,44Kb>1,wrQ=,772A,wqg=,77y+,77+j,77y/,44O9>1,44Kd>1,44CD,5Lud,44CF>2,44O8,4oCV,4oCQ,77yP,77y8,772e,4oCW:4oil,772c,4oCm,4oCl,4oCY>1,4oCc>1,77yI>1,44CU>1,77y7,77y9,772b,772d,44CI>9,77yL,77yN,wrE=,w5c=,w7c=,77yd,4omg,77yc,77ye,4omm>1,4oie,4oi0,4pmC,4pmA,wrA=,4oCy>1,4oSD,77+l,77yE,77+g>1,77yF,77yD,77yG,77yK,77yg,wqc=,4piG,4piF,4peL,4peP,4peO,4peH',\n  2221: '4peG,4pah,4pag,4paz,4pay,4pa9,4pa8,4oC7,44CS,4oaS,4oaQ>1,4oaT,44CT',\n  2272: '4oSr,4oCw,4pmv,4pmt,4pmq,4oCg>1,wrY=',\n  2330: '77yQ>9',\n  2341: '77yh>19',\n  2361: '772B>19',\n  2421: '44GB>3e,44KA>13',\n  2521: '44Kh>1e,44OA>36',\n  2621: 'zpE=>10,zqM=>6',\n  2641: 'zrE=>e,z4A=>1,z4M=>6',\n  2721: '0JA=>5,0IE=,0JY=>19',\n  2751: '0LA=>5,0ZE=,0LY=>9,0YA=>f',\n  2821: '4pSA,4pSC,4pSM,4pSQ,4pSY,4pSU,4pSc,4pSs,4pSk,4pS0,4pS8,4pSB,4pSD,4pSP,4pST,4pSb,4pSX,4pSj,4pSz,4pSr,4pS7,4pWL,4pSg,4pSv,4pSo,4pS3,4pS/,4pSd,4pSw,4pSl,4pS4,4pWC',\n  3021: '5Lqc,5ZSW,5aiD,6Zi/,5ZOA,5oSb,5oyo,5ae2,6YCi,6JG1,6Iyc,56mQ,5oKq,5o+h,5ril,5pet,6JGm,6Iqm,6a+1,5qKT,5Zyn,5pah,5omx,5a6b,5aeQ,6Jm7,6aO0,57Wi,57a+,6a6O,5oiW,57Kf,6KK3,5a6J,5bq1,5oyJ,5pqX,5qGI,6ZeH,6Z6N,5p2P,5Lul,5LyK,5L2N,5L6d,5YGJ,5Zuy,5aS3,5aeU,5aiB,5bCJ,5oOf,5oSP,5oWw,5piT,5qSF,54K6,55WP,55Ww,56e7,57at,57ev,6IOD,6JCO,6KGj,6KyC,6YGV,6YG6,5Yy7,5LqV,5Lql,5Z+f,6IKy,6YOB,56Ov,5LiA,5aOx,5rqi,6YC4,56iy,6Iyo,6IqL,6bCv,5YWB,5Y2w,5ZK9,5ZOh,5Zug,5ae7,5byV,6aOy,5rer,6IOk,6JSt',\n  3121: '6Zmi,6Zmw,6Zqg,6Z+7,5ZCL,5Y+z,5a6H,54OP,5769,6L+C,6Zuo,5Y2v,6bWc,56q6,5LiR,56KT,6Ie8,5rim,5ZiY,5ZSE,5qyd,6JSa,6bC7,5ael,5Y6p,5rWm,55Oc,6ZaP,5ZmC,5LqR,6YGL,6Zuy,6I2P,6aSM,5Y+h,5Za2,5ayw,5b2x,5pig,5puz,5qCE,5rC4,5rOz,5rSp,55Gb,55uI,56mO,6aC0,6Iux,6KGb,6Kmg,6Yut,5ray,55ar,55uK,6aeF,5oKm,6KyB,6LaK,6Zay,5qaO,5Y6t,5YaG,5ZyS,5aCw,5aWE,5a60,5bu2,5oCo,5o6p,5o+0,5rK/,5ryU,54KO,54SU,54WZ,54eV,54y/,57iB,6Im2,6IuR,6JaX,6YGg,6Ymb,6bSb,5aGp,5pa8,5rGa,55Sl,5Ye5,5aSu,5aWl,5b6A,5b+c',\n  3221: '5oq8,5pe6,5qiq,5qyn,5q60,546L,57+B,6KWW,6bSs,6bSO,6buE,5bKh,5rKW,6I27,5YSE,5bGL,5oa2,6IeG,5qG2,54mh,5LmZ,5L+6,5Y24,5oGp,5rip,56mP,6Z+z,5LiL,5YyW,5Luu,5L2V,5Ly9,5L6h,5L2z,5Yqg,5Y+v,5ZiJ,5aSP,5auB,5a62,5a+h,56eR,5pqH,5p6c,5p62,5q2M,5rKz,54Gr,54+C,56aN,56a+,56i8,566H,6Iqx,6Iub,6IyE,6I23,6I+v,6I+T,6J2m,6Kqy,5Zip,6LKo,6L+m,6YGO,6Zye,6JqK,5L+E,5bOo,5oiR,54mZ,55S7,6Iel,6Iq9,6Ju+,6LOA,6ZuF,6aST,6aeV,5LuL,5Lya,6Kej,5Zue,5aGK,5aOK,5bu7,5b+r,5oCq,5oKU,5oGi,5oeQ,5oiS,5ouQ,5pS5',\n  3321: '6a2B,5pmm,5qKw,5rW3,54Gw,55WM,55qG,57W1,6Iql,6J+5,6ZaL,6ZqO,6LKd,5Yex,5Yq+,5aSW,5ZKz,5a6z,5bSW,5oWo,5qaC,5rav,56KN,6JOL,6KGX,6Kmy,6Y6n,6aq4,5rWs,6aao,6JuZ,5Z6j,5p+/,6JuO,6YiO,5YqD,5ZqH,5ZCE,5buT,5ouh,5pK5,5qC8,5qC4,5q67,542y,56K6,56mr,6Kaa,6KeS,6LWr,6LyD,6YOt,6Zaj,6ZqU,6Z2p,5a2m,5bKz,5qW9,6aGN>1,5o6b,56yg,5qir,5qm/,5qK2,6bCN,5r2f,5Ymy,5Zad,5oGw,5ous,5rS7,5riH,5ruR,6JGb,6KSQ,6L2E,5LiU,6bC5,5Y+2,5qSb,5qi6,6Z6E,5qCq,5YWc,56uD,6JKy,6Yec,6Y6M,5Zmb,6bSo,5qCi,6IyF,6JCx',\n  3421: '57Kl,5YiI,6IuF,55Om,5Lm+,5L6D,5Yag,5a+S,5YiK,5YuY,5Yun,5be7,5Zaa,5aCq,5aem,5a6M,5a6Y,5a+b,5bmy,5bm5,5oKj,5oSf,5oWj,5oa+,5o+b,5pWi,5p+R,5qGT,5qO6,5qy+,5q2T,5rGX,5ryi,5r6X,5r2F,55Kw,55SY,55uj,55yL,56u/,566h,57Ch,57ep,57y2,57+w,6IKd,6Imm,6I6e,6Kaz,6KuM,6LKr,6YKE,6ZGR,6ZaT,6ZaR,6Zai,6Zml,6Z+T,6aSo,6IiY,5Li4,5ZCr,5bK4,5beM,546p,55mM,55y8,5bKp,57+r,6LSL,6ZuB,6aCR,6aGU,6aGY,5LyB,5LyO,5Y2x,5Zac,5Zmo,5Z+6,5aWH,5ayJ,5a+E,5bKQ,5biM,5bm+,5b+M,5o+u,5py6,5peX,5pei,5pyf,5qOL,5qOE',\n  3521: '5qmf,5biw,5q+F,5rCX,5rG9,55W/,56WI,5a2j,56iA,57SA,5b69,6KaP,6KiY,6LK0,6LW3,6LuM,6Lyd,6aOi,6aiO,6ay8,5LqA,5YG9,5YSA,5aaT,5a6c,5oiv,5oqA,5pOs,5qy6,54qg,55aR,56WH,576p,6J+7,6Kq8,6K2w,5o6s,6I+K,6Z6g,5ZCJ,5ZCD,5Zar,5qGU,5qmY,6Kmw,56Cn,5p21,6buN,5Y20,5a6i,6ISa,6JmQ,6YCG,5LiY,5LmF,5LuH,5LyR,5Y+K,5ZC4,5a6u,5byT,5oCl,5pWR,5py9,5rGC,5rGy,5rOj,54G4,55CD,56m2,56qu,56yI,57Sa,57O+,57Wm,5pen,54mb,5Y67,5bGF,5beo,5ouS,5oug,5oyZ,5rig,6Jma,6Kix,6Led,6Yu4,5ryB,56am,6a2a,5Lqo,5Lqr>1',\n  3621: '5L6b,5L6g,5YOR,5YWH,56u2,5YWx,5Ye2,5Y2U,5Yyh,5Y2/,5Y+r,5Zas,5aKD,5bOh,5by3,5b2K,5oCv,5oGQ,5oGt,5oyf,5pWZ,5qmL,5rOB,54uC,54ut,55+v,6IO4,6ISF,6IiI,6JWO,6YO3,6Y+h,6Z+/,6aWX,6ama,5Luw,5Yed,5bCt,5pqB,5qWt,5bGA,5puy,5qW1,546J,5qGQ,57KB,5YOF,5Yuk,5Z2H,5be+,6Yym,5pak,5qyj,5qy9,55C0,56aB,56a9,562L,57eK,6Iq5,6I+M,6KG/,6KWf,6Ky5,6L+R,6YeR,5ZCf,6YqA,5Lmd,5YC2,5Y+l,5Yy6,54uX,546W,55+p,6Ium,6Lqv,6aeG,6aeI,6aeS,5YW3,5oSa,6Jme,5Zaw,56m6,5YG2,5a+T,6YGH,6ZqF,5Liy,5qub,6Yen,5bGR,5bGI',\n  3721: '5o6Y,56qf,5rKT,6Z20,6L2h,56qq,54aK,6ZqI,57KC,5qCX,57mw,5qGR,6Y2s,5Yuy,5ZCb,6Jar,6KiT,576k,6LuN,6YOh,5Y2m,6KKI,56WB,5L+C,5YK+,5YiR,5YWE,5ZWT,5Zyt,54+q,5Z6L,5aWR,5b2i,5b6E,5oG1,5oW2,5oWn,5oap,5o6y,5pC6,5pWs,5pmv,5qGC,5riT,55Wm,56i9,57O7,57WM,57aZ,57mL,572r,6IyO,6I2K,6JuN,6KiI,6Kmj,6K2m,6Lu9,6aCa,6baP,6Iq4,6L+O,6a+o,5YqH,5oif,5pKD,5r+A,6ZqZ,5qGB,5YKR,5qyg,5rG6,5r2U,56m0,57WQ,6KGA,6Kij,5pyI,5Lu2,5YC5,5YCm,5YGl,5YW8,5Yi4,5Ymj,5Zan,5ZyP,5aCF,5auM,5bu6,5oay,5oe4,5ouz,5o2y',\n  3821: '5qSc,5qip,54m9,54qs,54yu,56CU,56Gv,57W5,55yM,6IKp,6KaL,6KyZ,6LOi,6LuS,6YGj,6Y21,6Zm6,6aGV,6aiT,6bm4,5YWD,5Y6f,5Y6z,5bm7,5bym,5rib,5rqQ,546E,54++,57WD,6Ii3,6KiA,6Ku6,6ZmQ,5LmO,5YCL,5Y+k,5ZG8,5Zu6,5aeR,5a2k,5bex,5bqr,5byn,5oi4,5pWF,5p6v,5rmW,54uQ,57OK,6KK0,6IKh,6IOh,6I+w,6JmO,6KqH,6Leo,6Yi3,6ZuH,6aGn,6byT,5LqU,5LqS,5LyN,5Y2I,5ZGJ,5ZC+,5aiv,5b6M,5b6h,5oKf,5qKn,5qqO,55Ga,56KB,6Kqe,6Kqk,6K23,6YaQ,5Lme,6a+J,5Lqk,5L28,5L6v,5YCZ,5YCW,5YWJ,5YWs,5Yqf,5Yq5,5Yu+,5Y6a,5Y+j,5ZCR',\n  3921: '5ZCO,5ZaJ,5Z2R,5Z6i,5aW9,5a2U,5a2d,5a6P,5bel,5ben,5be3,5bm4,5bqD,5bqa,5bq3,5byY,5oGS,5oWM,5oqX,5ouY,5o6n,5pS7,5piC,5pmD,5pu0,5p2t,5qCh,5qKX,5qeL,5rGf,5rSq,5rWp,5riv,5rqd,55Sy,55qH,56Gs,56i/,57Og,57SF,57SY,57We,57ax,6ICV,6ICD,6IKv,6IKx,6IWU,6IaP,6Iiq,6I2S,6KGM,6KGh,6Kyb,6LKi,6LO8,6YOK,6YW1,6Ymx,56C/,6Yu8,6Zak,6ZmN,6aCF,6aaZ,6auY,6bS7,5Ymb,5Yqr,5Y+3,5ZCI,5aOV,5ou3,5r+g,6LGq,6L2f,6bq5,5YWL,5Yi7,5ZGK,5Zu9,56mA,6YW3,6bWg,6buS,542E,5ryJ,6IWw,55SR,5b+9,5oOa,6aqo,54ub,6L68',\n  4021: '5r6E,5pG6,5a+4,5LiW,54Cs,55Wd,5piv,5YeE,5Yi2,5Yui,5aeT,5b6B,5oCn,5oiQ,5pS/,5pW0,5pif,5pm0,5qOy,5qCW,5q2j,5riF,54my,55Sf,55ub,57K+,6IGW,5aOw,6KO9,6KW/,6Kqg,6KqT,6KuL,6YCd,6YaS,6Z2S,6Z2Z,5paJ,56iO,6ISG,6Zq7,5bit,5oOc,5oia,5pal,5piU,5p6Q,55+z,56mN,57GN,57i+,6ISK,6LKs,6LWk,6Leh,6Lmf,56Kp,5YiH,5ouZ,5o6l,5pGC,5oqY,6Kit,56qD,56+A,6Kqs,6Zuq,57W2,6IiM,6J2J,5LuZ,5YWI,5Y2D,5Y2g,5a6j,5bCC,5bCW,5bed,5oim,5omH,5pKw,5qCT,5qC0,5rOJ,5rWF,5rSX,5p+T,5r2c,54WO,54W9,5peL,56m/,566t,57ea',\n  4121: '57mK,576o,6IW6,6Iib,6Ii5,6Jam,6Kmu,6LOO,6Le1,6YG4,6YG3,6Yqt,6YqR,6ZaD,6a6u,5YmN,5ZaE,5ry4,54S2,5YWo,56aF,57mV,6Iaz,57OO,5ZmM,5aGR,5bKo,5o6q,5pu+,5pu9,5qWa,54uZ,55aP,55aO,56SO,56WW,56ef,57KX,57Sg,57WE,6JiH,6Ki0,6Zi7,6YGh,6byg,5YOn,5Ym1,5Y+M,5Y+i,5YCJ,5Zaq,5aOu,5aWP,54i9,5a6L,5bGk,5Yyd,5oOj,5oOz,5o2c,5o6D,5oy/,5o67,5pON,5pep,5pu5,5bej,5qeN,5qe9,5ryV,54el,5LqJ,55ep,55u4,56qT,57Of,57eP,57ac,6IGh,6I2J,6I2Y,6JGs,6JK8,6Je7,6KOF,6LWw,6YCB,6YGt,6Y6X,6Zyc,6aiS,5YOP,5aKX,5oaO',\n  4221: '6IeT,6JS1,6LSI,6YCg,5L+D,5YG0,5YmH,5Y2z,5oGv,5o2J,5p2f,5ris,6Laz,6YCf,5L+X,5bGe,6LOK,5peP,57aa,5Y2S,6KKW,5YW2,5o+D,5a2Y,5a2r,5bCK,5pCN,5p2R,6YGc,5LuW,5aSa,5aSq,5rGw,6KmR,5ZS+,5aCV,5aal,5oOw,5omT,5p+B,6Ii1,5qWV,6ZmA,6aeE,6aio,5L2T,5aCG,5a++,6ICQ,5bKx,5biv,5b6F,5oCg,5oWL,5oi0,5pu/,5rOw,5rue,6IOO,6IW/,6IuU,6KKL,6LK4,6YCA,6YCu,6ZqK,6bub,6a+b,5Luj,5Y+w,5aSn,56ys,6YaN,6aGM,6be5,5rud,54Cn,5Y2T,5ZWE,5a6F,5omY,5oqe,5ouT,5rKi,5r+v,55Ci,6KiX,6ZC4,5r+B,6Ku+,6Iy4,5Yen,6Ju4,5Y+q',\n  4321: '5Y+p,5L2G,6YGU,6L6w,5aWq,6ISx,5be9,56uq,6L6/,5qOa,6LC3,54u4,6bGI,5qi9,6Kqw,5Li5,5Y2Y,5ZiG,5Z2m,5ouF,5o6i,5pem,5q2O,5reh,5rmb,54Kt,55+t,56uv,566q,57a7,6IC9,6IOG,6JuL,6KqV,6Y2b,5Zuj,5aOH,5by+,5pat,5pqW,5qqA,5q61,55S3,6KuH,5YCk,55+l,5Zyw,5byb,5oGl,5pm6,5rGg,55e0,56ia,572u,6Ie0,6JyY,6YGF,6aaz,56+J,55Wc,56u5,562R,6JOE,6YCQ,56ep,56qS,6Iy2,5auh,552A,5Lit,5Luy,5a6Z,5b+g,5oq9,5pi8,5p+x,5rOo,6Jmr,6KG3,6Ki7,6YWO,6Yuz,6aeQ,5qiX,54Cm,54yq,6Iun,6JGX,6LKv,5LiB,5YWG,5YeL,5ZaL,5a+1',\n  4421: '5biW,5biz,5bqB,5byU,5by1,5b2r,5b60,5oey,5oyR,5pqi,5pyd,5r2u,54mS,55S6,55y6,6IG0,6IS5,6IW4,6J22,6Kq/,6Kuc,6LaF,6Lez,6Yqa,6ZW3,6aCC,6bOl,5YuF,5o2X,55u0,5pyV,5rKI,54+N,6LOD,6Y6u,6Zmz,5rSl,5aKc,5qSO,5qeM,6L+9,6Y6a,55eb,6YCa,5aGa,5qCC,5o60,5qe7,5L2D,5rys,5p+Y,6L67,6JSm,57a0,6Y2U,5qS/,5r2w,5Z2q,5aO3,5ays,57Ss,54iq,5ZCK,6Yej,6ba0,5Lqt,5L2O,5YGc,5YG1,5YmD,6LKe,5ZGI,5aCk,5a6a,5bid,5bqV,5bqt,5bu3,5byf,5oKM,5oq1,5oy6,5o+Q,5qKv,5rGA,56KH,56aO,56iL,57eg,6ImH,6KiC,6Kum,6LmE,6YCT',\n  4521: '6YK4,6YSt,6YeY,6byO,5rOl,5pGY,5pOi,5pW1,5ru0,55qE,56yb,6YGp,6Y+R,5rq6,5ZOy,5b65,5pKk,6L2N,6L+t,6YmE,5YW4,5aGr,5aSp,5bGV,5bqX,5re7,57qP,55Sc,6LK8,6Lui,6aGb,54K5,5Lyd,5q6/,5r6x,55Sw,6Zu7,5YWO,5ZCQ,5aC1,5aGX,5aas,5bGg,5b6S,5paX,5p2c,5rih,55m7,6I+f,6LOt,6YCU,6YO9,6Y2N,56Cl,56C6,5Yqq,5bqm,5Zyf,5aW0,5oCS,5YCS,5YWa,5Yas,5YeN,5YiA,5ZSQ,5aGU,5aGY,5aWX,5a6V,5bO2,5baL,5oK8,5oqV,5pCt,5p2x,5qGD,5qK8,5qOf,55uX,5reY,5rmv,5rab,54Gv,54eI,5b2T,55eY,56W3,562J,562U,562S,57OW,57Wx,5Yiw',\n  4621: '6JGj,6JWp,6Jek,6KiO,6KyE,6LGG,6LiP,6YCD,6YCP,6ZCZ,6Zm2,6aCt,6aiw,6ZeY,5YON,5YuV,5ZCM,5aCC,5bCO,5oan,5pKe,5rSe,556z,56ul,6IO0,6JCE,6YGT,6YqF,5bOg,6bSH,5Yy/,5b6X,5b6z,5rac,54m5,552j,56a/,56+k,5q+S,54us,6Kqt,5qCD,5qmh,5Ye4,56qB,5qS0,5bGK,6bO2,6Iur,5a+F,6YWJ,54Ce,5Zm4,5bGv,5oOH,5pWm,5rKM,6LGa,6YGB,6aCT,5ZGR,5puH,6YiN,5aWI,6YKj,5YaF,5LmN,5Yeq,6JaZ,6KyO,54GY,5o26,6Y2L,5qWi,6aa0,57iE,55W3,5Y2X,5qWg,6Luf,6Zuj,5rGd,5LqM,5bC8,5byQ,6L+p,5YyC,6LOR,6IKJ,6Jm5,5bu/,5pel,5Lmz,5YWl',\n  4721: '5aaC,5bC/,6Z+u,5Lu7,5aaK,5b+N,6KqN,5r+h,56aw,56Wi,5a+n,6JGx,54yr,54ax,5bm0,5b+1,5o27,5pKa,54eD,57KY,5LmD,5bu8,5LmL,5Z+c,5Zqi,5oKp,5r+D,57SN,6IO9,6ISz,6Ia/,6L6y,6KaX,6Jqk,5be0,5oqK,5pKt,6KaH,5p23,5rOi,5rS+,55C2,56C0,5amG,5721,6Iqt,6aas,5L+z,5buD,5oud,5o6S,5pWX,5p2v,55uD,54mM,6IOM,6IK6,6Lyp,6YWN,5YCN,5Z+5,5aqS,5qKF,5qWz,54Wk,54u9,6LK3,5aOy,6LOg,6Zmq,6YCZ,6J2/,56ek,55+n,6JCp,5Lyv,5Yml,5Y2a,5ouN,5p+P,5rOK,55m9,566U,57KV,6Ii2,6JaE,6L+r,5pud,5ryg,54iG,57ib,6I6r,6aeB,6bqm',\n  4821: '5Ye9,566x,56Gy,5664,6IKH,562I,5quo,5bmh,6IKM,55WR,55Wg,5YWr,6Ymi,5rqM,55m6,6YaX,6auq,5LyQ,572w,5oqc,562P,6Zal,6bOp,5Zm6,5aGZ,6Juk,6Zq8,5Ly0,5Yik,5Y2K,5Y+N,5Y+b,5biG,5pCs,5paR,5p2/,5rC+,5rGO,54mI,54qv,54+t,55WU,57mB,6Iis,6Jep,6LKp,56+E,6YeG,54Wp,6aCS,6aOv,5oy9,5pmp,55Wq,55uk,56OQ,6JWD,6Juu,5Yyq,5Y2R,5ZCm,5aaD,5bqH,5b28,5oKy,5omJ,5om5,5oqr,5paQ,5q+U,5rOM,55ay,55qu,56KR,56eY,57eL,5723,6IKl,6KKr,6Kq5,6LK7,6YG/,6Z2e,6aOb,5qiL,57C4,5YKZ,5bC+,5b6u,5p6H,5q+Y,55C1,55yJ,576O',\n  4921: '6by7,5p+K,56iX,5Yy5,55aL,6aut,5b2m,6Iad,6I+x,6IKY,5by8,5b+F,55Wi,562G,6YC8,5qGn,5aer,5aqb,57SQ,55m+,6Kys,5L+1,5b2q,5qiZ,5rC3,5ryC,55Oi,56Wo,6KGo,6KmV,6LG5,5buf,5o+P,55eF,56eS,6IuX,6Yyo,6Yuy,6JKc,6Jut,6bCt,5ZOB,5b2s,5paM,5rWc,54CV,6LKn,6LOT,6aC7,5pWP,55O2,5LiN,5LuY,5Z+g,5aSr,5amm,5a+M,5Yao,5biD,5bqc,5oCW,5om2,5pW3,5pan,5pmu,5rWu,54i2,56ym,6IWQ,6Iaa,6IqZ,6K2c,6LKg,6LOm,6LW0,6Zic,6ZmE,5L6u,5pKr,5q2m,6Iie,6JGh,6JWq,6YOo,5bCB,5qWT,6aKo,6JG6,6JWX,5LyP,5Ymv,5b6p,5bmF,5pyN',\n  5021: '5byM,5LiQ,5LiV,5Liq,5Lix,5Li2,5Li8,5Li/,5LmC,5LmW,5LmY,5LqC,5LqF,6LGr,5LqK,6IiS,5byN,5LqO,5Lqe>2,5Lqi,5Lqw,5Lqz,5Lq2,5LuO,5LuN,5LuE,5LuG,5LuC,5LuX,5Lue,5Lut,5Luf,5Lu3,5LyJ,5L2a,5Lyw,5L2b,5L2d,5L2X,5L2H,5L22,5L6I,5L6P,5L6Y,5L27,5L2p,5L2w,5L6R,5L2v,5L6G,5L6W,5YSY,5L+U,5L+f,5L+O,5L+Y,5L+b,5L+R,5L+a,5L+Q,5L+k>1,5YCa,5YCo,5YCU,5YCq,5YCl,5YCF,5Lyc,5L+2,5YCh,5YCp,5YCs,5L++,5L+v,5YCR,5YCG,5YGD,5YGH,5pyD,5YGV,5YGQ,5YGI,5YGa,5YGW,5YGs,5YG4,5YKA,5YKa,5YKF,5YK0,5YKy',\n  5121: '5YOJ>1,5YKz,5YOC,5YOW,5YOe,5YOl,5YOt,5YOj,5YOu,5YO5,5YO1,5YSJ,5YSB>1,5YSW,5YSV,5YSU,5YSa,5YSh,5YS6,5YS3,5YS8,5YS7,5YS/,5YWA,5YWS,5YWM,5YWU,5YWi,56u4,5YWp>1,5YWu,5YaA,5YaC,5ZuY,5YaM,5YaJ,5YaP,5YaR,5YaT,5YaV>1,5Yak,5Yam,5Yai,5Yap>2,5Yaz,5Yax>1,5Yaw,5Ya1,5Ya9,5YeF,5YeJ,5Yeb,5Yeg,6JmV,5Yep,5Yet,5Yew,5Ye1,5Ye+,5YiE,5YiL,5YiU,5YiO,5Yin,5Yiq,5Yiu,5Yiz,5Yi5,5YmP,5YmE,5YmL>1,5Yme,5YmU,5Ymq,5Ym0,5Ymp,5Ymz,5Ym/,5Ym9,5YqN,5YqU,5YqS,5Ymx,5YqI,5YqR,6L6o',\n  5221: '6L6n,5Yqs>1,5Yq8,5Yq1,5YuB,5YuN,5YuX,5Yue,5Yuj,5Yum,6aOt,5Yug,5Yuz,5Yu1,5Yu4>1,5YyG,5YyI,55S4,5YyN,5YyQ,5YyP,5YyV,5Yya,5Yyj,5Yyv,5Yyx,5Yyz,5Yy4,5Y2A,5Y2G,5Y2F,5LiX,5Y2J,5Y2N,5YeW,5Y2e,5Y2p,5Y2u,5aSY,5Y27,5Y23,5Y6C,5Y6W,5Y6g,5Y6m,5Y6l,5Y6u,5Y6w,5Y62,5Y+D,57CS,6ZuZ,5Y+f,5pu8,54eu,5Y+u,5Y+o,5Y+t,5Y+6,5ZCB,5ZC9,5ZGA,5ZCs>1,5ZC8,5ZCu,5ZC2,5ZCp,5ZCd,5ZGO,5ZKP,5ZG1,5ZKO,5ZGf,5ZGx,5ZG3,5ZGw,5ZKS,5ZG7,5ZKA,5ZG2,5ZKE,5ZKQ,5ZKG,5ZOH,5ZKi,5ZK4,5ZKl,5ZKs,5ZOE,5ZOI,5ZKo',\n  5321: '5ZKr,5ZOC,5ZKk,5ZK+,5ZK8,5ZOY,5ZOl>1,5ZSP,5ZSU,5ZO9,5ZOu,5ZOt,5ZO6,5ZOi,5ZS5,5ZWA,5ZWj,5ZWM,5ZSu,5ZWc,5ZWF,5ZWW>1,5ZS4,5ZSz,5ZWd,5ZaZ,5ZaA,5ZKv,5ZaK,5Zaf,5ZW7,5ZW+,5ZaY,5Zae,5Zau,5ZW8,5ZaD,5Zap,5ZaH,5Zao,5Zea,5ZeF,5Zef,5ZeE,5Zec,5Zek,5ZeU,5ZiU,5Ze3,5ZiW,5Ze+,5Ze9,5Zib,5Ze5,5ZmO,5ZmQ,54ef,5Zi0,5Zi2,5Ziy,5Zi4,5Zmr,5Zmk,5Ziv,5Zms,5Zmq,5ZqG,5ZqA,5ZqK,5Zqg,5ZqU,5ZqP,5Zql,5Zqu,5Zq2,5Zq0,5ZuC,5Zq8,5ZuB,5ZuD,5ZuA,5ZuI,5ZuO,5ZuR,5ZuT,5ZuX,5Zuu,5Zu5,5ZyA,5Zu/,5ZyE,5ZyJ',\n  5421: '5ZyI,5ZyL,5ZyN,5ZyT,5ZyY,5ZyW,5ZeH,5Zyc,5Zym,5Zy3>1,5Z2O,5Zy7,5Z2A,5Z2P,5Z2p,5Z+A,5Z6I,5Z2h,5Z2/,5Z6J,5Z6T,5Z6g,5Z6z,5Z6k,5Z6q,5Z6w,5Z+D,5Z+G,5Z+U,5Z+S>1,5aCK,5Z+W,5Z+j,5aCL,5aCZ,5aCd,5aGy,5aCh,5aGi,5aGL,5aGw,5q+A,5aGS,5aC9,5aG5,5aKF,5aK5,5aKf,5aKr,5aK6,5aOe,5aK7,5aK4,5aKu,5aOF,5aOT,5aOR,5aOX,5aOZ,5aOY,5aOl,5aOc,5aOk,5aOf,5aOv,5aO6,5aO5,5aO7>2,5aSC,5aSK,5aSQ,5aSb,5qKm,5aSl,5aSs>1,5aSy,5aS4,5aS+,56uS,5aWV,5aWQ,5aWO,5aWa,5aWY,5aWi,5aWg,5aWn,5aWs,5aWp',\n  5521: '5aW4,5aaB,5aad,5L2e,5L6r,5aaj,5aay,5aeG,5aeo,5aec,5aaN,5aeZ>1,5ail,5aif,5aiR,5aic,5aiJ,5aia,5amA,5ams,5amJ,5ai1>1,5ami,5amq,5aqa,5aq8,5aq+,5auL,5auC,5aq9,5auj,5auX,5aum,5aup,5auW,5au6>1,5ayM,5ayL,5ayW,5ayy,5auQ,5ayq,5ay2,5ay+,5a2D,5a2F,5a2A,5a2R,5a2V,5a2a>1,5a2l,5a2p,5a2w,5a2z,5a21,5a24,5paI,5a26,5a6A,5a6D,5a6m,5a64,5a+D,5a+H,5a+J,5a+U,5a+Q,5a+k,5a+m,5a+i,5a+e,5a+l,5a+r,5a+w,5a+2,5a+z,5bCF,5bCH>1,5bCN,5bCT,5bCg,5bCi,5bCo,5bC4>1,5bGB,5bGG,5bGO,5bGT',\n  5621: '5bGQ,5bGP,5a2x,5bGs,5bGu,5Lmi,5bG2,5bG5,5bKM,5bKR,5bKU,5aab,5bKr,5bK7,5bK2,5bK8,5bK3,5bOF,5bK+,5bOH,5bOZ,5bOp,5bO9,5bO6,5bOt,5baM,5bOq,5bSL,5bSV,5bSX,5bWc,5bSf,5bSb,5bSR,5bSU,5bSi,5bSa,5bSZ,5bSY,5bWM,5bWS,5bWO,5bWL,5bWs,5bWz,5bW2,5baH,5baE,5baC,5bai,5bad,5bas,5bau,5ba9,5baQ,5ba3,5ba8,5beJ,5beN,5beT,5beS,5beW,5beb,5ber,5bey,5be1,5biL,5bia,5biZ,5biR,5bib,5bi2>1,5bmE,5bmD,5bmA,5bmO,5bmX,5bmU,5bmf,5bmi,5bmk,5bmH,5bm1>1,5bm6,6bq8,5bm/,5bqg,5buB>1,5buI,5buQ,5buP',\n  5721: '5buW,5buj,5bud,5bua>1,5bui,5buh,5buo>1,5bus,5bux,5buz,5buw,5bu0,5bu4,5bu+,5byD,5byJ,5b2d,5b2c,5byL,5byR,5byW,5byp,5byt,5by4,5b2B,5b2I,5b2M,5b2O,5byv,5b2R,5b2W>1,5b2Z,5b2h,5b2t,5b2z,5b23,5b6D,5b6C,5b2/,5b6K,5b6I,5b6R,5b6H,5b6e,5b6Z,5b6Y,5b6g,5b6o,5b6t,5b68,5b+W,5b+7,5b+k,5b+4,5b+x,5b+d,5oKz,5b+/,5oCh,5oGg,5oCZ,5oCQ,5oCp,5oCO,5oCx,5oCb,5oCV,5oCr,5oCm,5oCP,5oC6,5oGa,5oGB,5oGq,5oG3,5oGf,5oGK,5oGG,5oGN,5oGj,5oGD,5oGk,5oGC,5oGs,5oGr,5oGZ,5oKB,5oKN,5oOn,5oKD,5oKa',\n  5821: '5oKE,5oKb,5oKW>1,5oKS,5oKn,5oKL,5oOh,5oK4,5oOg,5oOT,5oK0,5b+w,5oK9,5oOG,5oK1,5oOY,5oWN,5oSV,5oSG,5oO2>1,5oSA,5oO0,5oO6,5oSD,5oSh,5oO7,5oOx,5oSN>1,5oWH,5oS+,5oSo,5oSn,5oWK,5oS/,5oS8,5oSs,5oS0,5oS9,5oWC,5oWE,5oWz,5oW3,5oWY>2,5oWr,5oW0,5oWv,5oWl,5oWx,5oWf,5oWd,5oWT,5oW1,5oaZ,5oaW,5oaH,5oas,5oaU,5oaa,5oaK,5oaR,5oar,5oau,5oeM,5oeK,5oeJ,5oe3,5oeI,5oeD,5oeG,5oa6,5oeL,5725,5oeN,5oem,5oej,5oe2,5oe6,5oe0,5oe/,5oe9,5oe8,5oe+,5oiA,5oiI>1,5oiN,5oiM,5oiU,5oib',\n  5921: '5oie,5oih,5oiq,5oiu,5oiw,5oiy>1,5omB,5omO,5ome,5omj,5omb,5omg,5omo,5om8,5oqC,5oqJ,5om+,5oqS>1,5oqW,5ouU,5oqD,5oqU,5ouX,5ouR,5oq7,5ouP,5ou/,5ouG,5pOU,5ouI,5ouc,5ouM,5ouK,5ouC,5ouH,5oqb,5ouJ,5oyM,5ouu,5oux,5oyn,5oyC,5oyI,5ouv,5ou1,5o2Q,5oy+,5o2N,5pCc,5o2P,5o6W,5o6O,5o6A,5o6r,5o22,5o6j,5o6P,5o6J,5o6f,5o61,5o2r,5o2p,5o6+,5o+p,5o+A,5o+G,5o+j,5o+J,5o+S,5o+2,5o+E,5pCW,5pC0,5pCG,5pCT,5pCm,5pC2,5pSd,5pCX,5pCo,5pCP,5pGn,5pGv,5pG2,5pGO,5pSq,5pKV,5pKT,5pKl,5pKp,5pKI,5pK8',\n  6021: '54e5,54e/,54iN,54iQ,54ib,54io,54it,54is,54iw,54iy,54i7>1,54i/,54mA,54mG,54mL,54mY,54m0,54m+,54qC,54qB,54qH,54qS,54qW,54qi,54qn,54q5,54qy,54uD,54uG,54uE,54uO,54uS,54ui,54ug>1,54u5,54u3,5YCP,54yX,54yK,54yc,54yW,54yd,54y0,54yv,54yp,54yl,54y+,542O>1,6buY,542X,542q,542o,542w,5424,5421,5427,5426,54+I,546z,54+O,5467,54+A,54+l,54+u,54+e,55Ki,55CF,55Gv,55Cl,54+4,55Cy,55C6,55GV,55C/,55Gf,55GZ,55GB,55Gc,55Gp,55Gw,55Gj,55Gq,55G2,55G+,55KL,55Ke,55Kn,55OK,55OP,55OU,54+x',\n  6121: '55Og,55Oj,55On,55Op,55Ou,55Oy,55Ow>1,55O4,55O3,55SE,55SD,55SF,55SM,55SO,55SN,55SV,55ST,55Se,55Sm,55Ss,55S8,55WE,55WN,55WK,55WJ,55Wb,55WG,55Wa,55Wp,55Wk,55Wn,55Wr,55Wt,55W4,55W2,55aG>1,55W0,55aK,55aJ,55aC,55aU,55aa,55ad,55al,55aj,55eC,55az,55eD,55a1,55a9,55a4,55a8,55ax,55eN,55eK,55eS,55eZ,55ej,55ee,55e+>1,55e8,55iB,55ew,55e6,55ey>1,55iL,55iN,55iJ,55if,55in,55ig>2,55ik,55i0,55iw,55i7,55mH>1,55mG,55mc,55mY,55mh>1,55mo>2,55mn,55ms,55mw',\n  6221: '55my,55m2,55m4,55m8,55qA,55qD,55qI,55qL,55qO,55qW,55qT,55qZ>1,55qw,55q0,55q4>2,55uC,55uN,55uW,55uS,55ue,55uh,55ul,55un,55uq,6Jiv,55u7,55yI,55yH,55yE,55yp,55yk,55ye,55yl>1,55yb,55y3>1,552H,552a,552o,552r,552b,552l,552/,552+,5525,556O,556L,556R,556g,556e,556w,5562,5565,556/,5568>1,5567,55+H,55+N,55+X,55+a,55+c,55+j,55+u,55+8,56CM,56CS,56Sm,56Cg,56Sq,56GF,56KO,56G0,56KG,56G8,56Ka,56KM,56Kj,56K1,56Kq,56Kv,56OR,56OG,56OL,56OU,56K+,56K8,56OF,56OK,56Os',\n  6321: '56On,56Oa,56O9,56O0,56SH,56SS,56SR,56SZ,56Ss,56Sr,56WA,56Wg,56WX,56Wf,56Wa,56WV,56WT,56W6,56W/,56aK,56ad,56an,6b2L,56aq,56au,56az,56a5>1,56eJ,56eV,56en,56es,56eh,56ej,56iI,56iN,56iY>1,56ig,56if,56aA,56ix,56i7,56i+,56i3,56mD,56mX,56mJ,56mh>1,56mp,6b6d,56mw,56m5,56m9,56qI,56qX,56qV,56qY,56qW,56qp,56uI,56qw,56q2,56uF,56uE,56q/,6YKD,56uH,56uK,56uN,56uP,56uV,56uT,56uZ>1,56ud,56uh>1,56um,56ut,56uw,56yC,56yP,56yK,56yG,56yz,56yY>1,56ye,56y1,56yo,56y2,562Q',\n  6421: '5626,56yE,562N,56yL,562M,562F,5621,562l,5620,562n,562w>1,562s,562u,566d,566Y,566f,566N,566c,566a,566L,566S,566P,562d,566Z,56+L,56+B,56+M,56+P,5660,56+G,56+d,56+p,57CR,57CU,56+m,56+l,57Gg,57CA,57CH,57CT,56+z,56+3,57CX,57CN,56+2,57Cj,57Cn,57Cq,57Cf,57C3,57Cr,57C9,57GM,57GD,57GU,57GP,57GA,57GQ,57GY,57Gf,57Gk,57GW,57Gl,57Gs,57G1,57KD,57KQ,57Kk,57Kt,57Ki,57Kr,57Kh,57Ko,57Kz,57Ky,57Kx,57Ku,57K5,57K9,57OA,57OF,57OC,57OY,57OS,57Oc,57Oi,6ay7,57Ov,57Oy,57O0,57O2,57O6,57SG',\n  6521: '57SC,57Sc,57SV,57SK,57WF,57WL,57Su,57Sy,57S/,57S1,57WG,57Wz,57WW,57WO,57Wy,57Wo,57Wu,57WP,57Wj,57aT,57aJ,57Wb,57aP,57W9,57ab,57a6,57au,57aj,57a1,57eH,57a9,57ar,57i9,57ai,57av,57ec,57a4,57af,57aw,57eY,57ed,57ek,57ee,57e7,57ey,57eh,57iF,57iK,57ij,57ih,57iS,57ix,57if,57iJ,57iL,57ii,57mG,57mm,57i7,57i1,57i5,57mD,57i3,57iy,57i6,57mn,57md,57mW,57me,57mZ>1,57m5,57mq,57mp,57m8,57m7,57qD,57eV,57m9,6L6u,57m/,57qI>1,57qM,57qS,57qQ,57qT>1,57qW,57qO,57qb>1,57y4,57y6',\n  6621: '572F,572M>2,572Q>1,572V,572U,572Y,572f>1,572o>1,572n,5724,576C,576G,576D,576I,576H,576M,576U,576e,576d,576a,576j,576v,576y,5765,576u,5762,5764,6K2x,57+F>1,57+K,57+V,57+U,57+h,57+m,57+p,57+z,57+5,6aOc,6ICG,6ICE,6ICL,6ICS,6ICY>1,6ICc,6ICh,6ICo,6IC/,6IC7,6IGK,6IGG,6IGS,6IGY,6IGa,6IGf,6IGi,6IGo,6IGz,6IGy,6IGw,6IG2,6IG5,6IG9,6IG/,6IKE,6IKG,6IKF,6IKb,6IKT,6IKa,6IKt,5YaQ,6IKs,6IOb,6IOl,6IOZ,6IOd,6IOE,6IOa,6IOW,6ISJ,6IOv,6IOx,6ISb,6ISp,6ISj,6ISv,6IWL',\n  6721: '6ZqL,6IWG,6IS+,6IWT,6IWR,6IO8,6IWx,6IWu,6IWl>1,6IW0,6IaD,6IaI,6IaK,6IaA,6IaC,6Iag,6IaV,6Iak,6Iaj,6IWf,6IaT,6Iap,6Iaw,6Ia1,6Ia+,6Ia4,6Ia9,6IeA,6IeC,6Ia6,6IeJ,6IeN,6IeR,6IeZ,6IeY,6IeI,6Iea,6Ief>1,6Ien,6Ie6>1,6Ie+,6IiB>1,6IiF,6IiH,6IiK,6IiN,6IiQ,6IiW,6Iip,6Iir,6Ii4,6Iiz,6ImA,6ImZ,6ImY,6Imd,6Ima,6Imf,6Imk,6Imi,6Imo,6Imq>1,6Iiu,6Imx,6Im3>1,6Im+,6IqN,6IqS,6Iqr,6Iqf,6Iq7,6Iqs,6Iuh,6Iuj,6Iuf,6IuS,6Iu0,6Iuz,6Iu6,6I6T,6IyD,6Iu7,6Iu5,6Iue,6IyG,6Iuc,6IyJ,6IuZ',\n  6821: '6Iy1,6Iy0,6IyW,6Iyy,6Iyx,6I2A,6Iy5,6I2Q,6I2F,6Iyv,6Iyr,6IyX>1,6I6F,6I6a,6I6q,6I6f,6I6i,6I6W,6Iyj,6I6O,6I6H,6I6K,6I28,6I61,6I2z,6I21,6I6g,6I6J,6I6o,6I+0,6JCT,6I+r,6I+O,6I+9,6JCD,6I+Y,6JCL,6I+B,6I+3,6JCH,6I+g,6I+y,6JCN,6JCi,6JCg,6I69,6JC4,6JSG,6I+7,6JGt,6JCq,6JC8,6JWa,6JKE,6JG3,6JGr,6JKt,6JGu,6JKC,6JGp,6JGG,6JCs,6JGv,6JG5,6JC1,6JOK,6JGi,6JK5,6JK/,6JKf,6JOZ,6JON,6JK7,6JOa,6JOQ,6JOB,6JOG,6JOW,6JKh,6JSh,6JO/,6JO0,6JSX>1,6JSs,6JSf,6JSV,6JSU,6JO8,6JWA,6JWj,6JWY,6JWI',\n  6921: '6JWB,6JiC,6JWL,6JWV,6JaA,6Jak,6JaI,6JaR,6JaK,6Jao,6JWt,6JaU,6Jab,6Jeq,6JaH,6Jac,6JW3,6JW+,6JaQ,6JeJ,6Ja6,6JeP,6Ja5,6JeQ,6JeV,6Jed,6Jel,6Jec,6Je5,6JiK,6JiT,6JiL,6Je+,6Je6,6JiG,6Jii,6Jia,6Jiw,6Ji/,6JmN,5LmV,6JmU,6Jmf,6Jmn,6Jmx,6JqT,6Jqj,6Jqp>1,6JqL>1,6Jq2,6Jqv,6JuE,6JuG,6Jqw,6JuJ,6KCj,6Jqr,6JuU,6Jue,6Jup,6Jus,6Juf,6Jub,6Juv,6JyS,6JyG,6JyI,6JyA,6JyD,6Ju7,6JyR,6JyJ,6JyN,6Ju5,6JyK,6Jy0,6Jy/,6Jy3,6Jy7,6Jyl,6Jyp,6Jya,6J2g,6J2f,6J24,6J2M,6J2O,6J20,6J2X,6J2o,6J2u,6J2Z',\n  7021: '6Zmd,6Zmf,6Zmm,6Zmy,6Zms,6ZqN,6ZqY,6ZqV,6ZqX,6Zqq,6Zqn,6Zqx>1,6Zqw,6Zq0,6Zq2,6Zq4>1,6ZuO,6ZuL,6ZuJ,6ZuN,6KWN,6Zuc,6ZyN,6ZuV,6Zu5,6ZyE,6ZyG,6ZyI,6ZyT,6ZyO,6ZyR,6ZyP,6ZyW,6ZyZ,6Zyk,6Zyq,6Zyw,6Zy5,6Zy9>1,6Z2E,6Z2G,6Z2I,6Z2C,6Z2J,6Z2c,6Z2g,6Z2k,6Z2m,6Z2o,5YuS,6Z2r,6Z2x,6Z25,6Z6F,6Z28,6Z6B,6Z26,6Z6G,6Z6L,6Z6P>1,6Z6c,6Z6o,6Z6m,6Z6j,6Z6z>1,6Z+D,6Z+G,6Z+I,6Z+L,6Z+c,6Z+t,6b2P,6Z+y,56uf,6Z+2,6Z+1,6aCP,6aCM,6aC4,6aCk,6aCh,6aC3,6aC9,6aGG,6aGP,6aGL,6aGr,6aGv>1',\n  7121: '6aGx,6aG0,6aGz,6aKq,6aKv,6aKx,6aK2,6aOE,6aOD,6aOG,6aOp,6aOr,6aSD,6aSJ,6aSS,6aSU,6aSY,6aSh,6aSd>1,6aSk,6aSg,6aSs,6aSu,6aS9>1,6aWC,6aWJ,6aWF,6aWQ,6aWL,6aWR>1,6aWM,6aWV,6aaX>1,6aal,6aat>1,6aa8,6aef,6aeb,6aed,6aeY,6aeR,6aet>1,6aex>1,6ae7,6ae4,6aiB,6aiP,6aiF,6aei,6aiZ,6air,6ai3,6amF,6amC,6amA,6amD,6ai+,6amV,6amN,6amb,6amX,6amf,6ami,6aml,6amk,6amp,6amr,6amq,6aqt,6aqw,6aq8,6auA,6auP,6auR,6auT>1,6aue>1,6aui>1,6aum,6auv,6aur,6auu,6au0,6aux,6au3',\n  7221: '6au7,6ayG,6ayY,6aya,6ayf,6ayi>1,6ayl,6ayn>3,6ayu>1,6ayy,6a2E,6a2D,6a2P,6a2N>1,6a2R,6a2Y,6a20,6a6T,6a6D,6a6R,6a6W>1,6a6f>1,6a6o,6a60,6a+A,6a+K,6a65,6a+G,6a+P,6a+R>1,6a+j,6a+i,6a+k,6a+U,6a+h,6bC6,6a+y,6a+x,6a+w,6bCV,6bCU,6bCJ,6bCT,6bCM,6bCG,6bCI,6bCS,6bCK,6bCE,6bCu,6bCb,6bCl,6bCk,6bCh,6bCw,6bGH,6bCy,6bGG,6bC+,6bGa,6bGg,6bGn,6bG2,6bG4,6bOn,6bOs,6bOw,6bSJ,6bSI,6bOr,6bSD,6bSG,6bSq,6bSm,6bav,6bSj,6bSf,6bWE,6bSV,6bSS,6bWB,6bS/,6bS+,6bWG,6bWI',\n  7321: '6bWd>1,6bWk,6bWR,6bWQ,6bWZ,6bWy,6baJ,6baH,6bar,6bWv,6bW6,6baa,6bak,6bap,6bay,6beE,6beB,6ba7,6ba4,6ba6,6beG,6beP,6beC,6beZ,6beT,6be4,6bem,6bet,6bev,6be9,6bia>1,6bie,6bm1,6bm5,6bm9,6bqB,6bqI,6bqL>1,6bqS,6bqV,6bqR,6bqd,6bql,6bqp,6bq4,6bqq,6bqt,6Z2h,6buM,6buO>2,6buU,6buc,6bue,6bud,6bug,6bul,6buo,6buv,6bu0,6bu2>1,6bu5,6bu7>2,6byH>1,55q3,6byV,6byh,6bys,6by+,6b2K,6b2S,6b2U,6b2j,6b2f>2,6b2m>1,6b2s,6b2q,6b23,6b2y,6b22,6b6V,6b6c,6b6g',\n  7421: '5aCv,5qeH,6YGZ,55Gk,5Yec,54aZ',\n  7921: '57qK,6KSc,6Y2I,6YqI,6JOc,5L+J,54K7,5pix,5qOI,6Yu5,5pu7,5b2F,5Lio,5Luh,5Lu8,5LyA,5LyD,5Ly5,5L2W,5L6S,5L6K,5L6a,5L6U,5L+N,5YGA,5YCi,5L+/,5YCe,5YGG,5YGw,5YGC,5YKU,5YO0,5YOY,5YWK,5YWk,5Yad,5Ya+,5Yes,5YiV,5Yqc,5Yqm,5YuA,5Yub,5YyA,5YyH,5Yyk,5Y2y,5Y6T,5Y6y,5Y+d,76iO,5ZKc,5ZKK,5ZKp,5ZO/,5ZaG,5Z2Z,5Z2l,5Z6s,5Z+I,5Z+H,76iP>1,5aKe,5aKy,5aSL,5aWT,5aWb,5aWd,5aWj,5aak,5aa6,5a2W,5a+A,55Sv,5a+Y,5a+s,5bCe,5bKm,5bK6,5bO1,5bSn,5bWT,76iR,5bWC,5bWt,5ba4>1,5beQ,5byh,5by0,5b2n,5b63',\n  '223a': '4oiI,4oiL,4oqG>1,4oqC>1,4oiq,4oip',\n  '224a': '4oin>1,wqw=:77+i,4oeS,4oeU,4oiA,4oiD',\n  '225c': '4oig,4oql,4oyS,4oiC,4oiH,4omh,4omS,4omq>1,4oia,4oi9,4oid,4oi1,4oir>1',\n  '227e': '4pev',\n  '2d21': '4pGg>13,4oWg>9',\n  '2d40': '442J,44yU,44yi,442N,44yY,44yn,44yD,44y2,442R,442X,44yN,44ym,44yj,44yr,442K,44y7,446c>2,446O>1,44+E,446h',\n  '2d5f': '4427,44Cd,44Cf,4oSW,44+N,4oSh,44qk>4,44ix>1,44i5,442+,4429,4428',\n  '2d73': '4oiu,4oiR',\n  '2d78': '4oif,4oq/',\n  '3a21': '5q2k,6aCD,5LuK,5Zuw,5Z2k,5aK+,5ama,5oGo,5oeH,5piP,5piG,5qC5,5qKx,5re3,55eV,57S6,6Imu,6a2C,5Lqb,5L2Q,5Y+J,5ZSG,5bWv,5bem,5beu,5p+7,5rKZ,55Gz,56CC,6KmQ,6Y6W,6KOf,5Z2Q,5bqn,5oyr,5YK1,5YKs,5YaN,5pyA,5ZOJ,5aGe,5aa7,5a6w,5b2p,5omN,5o6h,5qC9,5q2z,5riI,54G9,6YeH,54qA,56CV,56Cm,56Wt,5paO,57Sw,6I+c,6KOB,6LyJ,6Zqb,5Ymk,5Zyo,5p2Q,572q,6LKh,5Ya0,5Z2C,6Ziq,5aC6,5qaK,6IK0,5ZKy,5bSO,5Z+8,56KV,6be6,5L2c,5YmK,5ZKL,5pC+,5pio,5pyU,5p+1,56qE,562W,57Si,6Yyv,5qGc,6a6t,56y5,5YyZ,5YaK,5Yi3',\n  '3b21': '5a+f,5ou2,5pKu,5pOm,5pyt,5q66,6Jap,6ZuR,55qQ,6a+W,5o2M,6YyG,6a6r,55q/,5pmS,5LiJ,5YKY,5Y+C,5bGx,5oOo,5pKS,5pWj,5qGf,54em,54+K,55Sj,566X,57qC,6JqV,6K6D,6LOb,6YW4,6aSQ,5pas,5pqr,5q6L,5LuV,5LuU,5Ly6,5L2/,5Yi6,5Y+4,5Y+y,5Zej,5Zub,5aOr,5aeL,5aeJ,5ae/,5a2Q,5bGN,5biC,5bir,5b+X,5oCd,5oyH,5pSv,5a2c,5pav,5pa9,5peo,5p6d,5q2i,5q27,5rCP,542F,56WJ,56eB,57O4,57SZ,57Sr,6IKi,6ISC,6Iez,6KaW,6Kme,6Kmp,6Kmm,6KqM,6Kuu,6LOH,6LOc,6ZuM,6aO8,5q2v,5LqL,5Ly8,5L6N,5YWQ,5a2X,5a+6,5oWI,5oyB,5pmC',\n  '3c21': '5qyh,5ruL,5rK7,54i+,55K9,55eU,56OB,56S6,6ICM,6ICz,6Ieq,6JKU,6L6e,5rGQ,6bm/,5byP,6K2Y,6bSr,56u6,6Lu4,5a6N,6Zur,5LiD,5Y+x,5Z+3,5aSx,5auJ,5a6k,5oKJ,5rm/,5ryG,55a+,6LOq,5a6f,6JSA,56+g,5YGy,5p+0,6Iqd,5bGh,6JWK,57ie,6IiO,5YaZ,5bCE,5o2o,6LWm,5pac,54Wu,56S+,57SX,6ICF,6Kyd,6LuK,6YGu,6JuH,6YKq,5YCf,5Yu6,5bC6,5p2T,54G8,54i1,6YWM,6YeI,6Yyr,6Iul,5a+C,5byx,5oO5,5Li7,5Y+W,5a6I,5omL,5pyx,5q6K,54up,54+g,56iu,6IWr,6Laj,6YWS,6aaW,5YSS,5Y+X,5ZGq,5a+/,5o6I,5qi5,57as,6ZyA,5Zua,5Y+O,5ZGo',\n  '3d21': '5a6X,5bCx,5bee,5L+u,5oSB,5ou+,5rSy,56eA,56eL,57WC,57mN,57+S,6Iet,6Iif,6JKQ,6KGG,6KWy,6K6Q,6Lm0,6Lyv,6YCx,6YWL,6YWs,6ZuG,6Yac,5LuA,5L2P,5YWF,5Y2B,5b6T,5oiO,5p+U,5rGB,5riL,542j,57im,6YeN,6YqD,5Y+U,5aSZ,5a6/,5reR,56Wd,57iu,57Kb,5aG+,54af,5Ye6,6KGT,6L+w,5L+K,5bO7,5pil,556s,56uj,6Iic,6ae/,5YeG,5b6q,5pes,5qWv,5q6J,5rez,5rqW,5r2k,55u+,57SU,5beh,6YG1,6YaH,6aCG,5Yem,5Yid,5omA,5pqR,5puZ,5ria,5bq2,57eS,572y,5pu4,6Jav,6Je3,6Ku4,5Yqp,5Y+Z,5aWz,5bqP,5b6Q,5oGV,6Yuk,6Zmk,5YK3,5YSf',\n  '3e21': '5Yud,5Yyg,5Y2H,5Y+s,5ZOo,5ZWG,5ZSx,5ZiX,5aWo,5aa+,5ai8,5a61,5bCG,5bCP,5bCR,5bCa,5bqE,5bqK,5bug,5b2w,5om/,5oqE,5oub,5o6M,5o23,5piH,5piM,5pit,5pm2,5p2+,5qKi,5qif,5qi1,5rK8,5raI,5riJ,5rmY,54S8,54Sm,54Wn,55eH,55yB,56Gd,56SB,56Wl,56ew,56ug,56yR,57Kn,57S5,6IKW,6I+W,6JKL,6JWJ,6KGd,6KOz,6Kif,6Ki8,6KmU,6Kmz,6LGh,6LOe,6Yak,6Ymm,6Y2+,6ZCY,6Zqc,6Z6Y,5LiK,5LiI,5Lie,5LmX,5YaX,5Ymw,5Z+O,5aC0,5aOM,5ayi,5bi4,5oOF,5pO+,5p2h,5p2W,5rWE,54q2,55Wz,56mj,6JK4,6K2y,6Ya4,6Yyg,5Zix,5Z+0,6aO+',\n  '3f21': '5out,5qSN,5q6W,54et,57mU,6IG3,6Imy,6Kem,6aOf,6J2V,6L6x,5bC7,5Ly4,5L+h,5L61,5ZSH,5aig,5a+d,5a+p,5b+D,5oWO,5oyv,5paw,5pmL,5qOu,5qab,5rW4,5rex,55Sz,55a5,55yf,56We,56em,57Sz,6Iej,6Iqv,6Jaq,6Kaq,6Ki6,6Lqr,6L6b,6YCy,6Yed,6ZyH,5Lq6,5LuB,5YiD,5aG1,5aOs,5bCL,55Sa,5bC9,6IWO,6KiK,6L+F,6Zmj,6Z2t,56yl,6KuP,6aCI,6YWi,5Zuz,5Y6o,6YCX,5ZC5,5Z6C,5bil,5o6o,5rC0,54KK,552h,57KL,57+g,6KGw,6YGC,6YWU,6YyQ,6YyY,6ZqP,55Ge,6auE,5bSH,5bWp,5pWw,5p6i,6Lao,6Zub,5o2u,5p2J,5qSZ,6I+F,6aCX,6ZuA,6KO+',\n  '4a21': '56aP,6IW5,6KSH,6KaG,5re1,5byX,5omV,5rK4,5LuP,54mp,6a6S,5YiG,5ZC7,5Zm0,5aKz,5oak,5omu,54Sa,5aWu,57KJ,57Oe,57Sb,6Zuw,5paH,6IGe,5LiZ,5L21,5YW1,5aGA,5bmj,5bmz,5byK,5p+E,5Lim,6JS9,6ZaJ,6Zmb,57Gz,6aCB,5YO7,5aOB,55mW,56Kn,5Yil,556l,6JSR,566G,5YGP,5aSJ,54mH,56+H,57eo,6L66,6L+U,6YGN,5L6/,5YuJ,5aip,5byB,6Z6t,5L+d,6IiX,6Yuq,5ZyD,5o2V,5q2p,55Sr,6KOc,6LyU,56mC,5Yuf,5aKT,5oWV,5oiK,5pqu,5q+N,57C/,6I+p,5YCj,5L+4,5YyF,5ZGG,5aCx,5aWJ,5a6d,5bOw,5bOv,5bSp,5bqW,5oqx,5o2n,5pS+,5pa5,5pyL',\n  '4b21': '5rOV,5rOh,54O5,56Cy,57ir,6IOe,6Iqz,6JCM,6JOs,6JyC,6KSS,6Kiq,6LGK,6YKm,6YuS,6aO9,6bOz,6bWs,5LmP,5Lqh,5YKN,5YmW,5Z2K,5aao,5bi9,5b+Y>1,5oi/,5pq0,5pyb,5p+Q,5qOS,5YaS,57Sh,6IKq,6Iao,6KyA,6LKM,6LK/,6Ym+,6Ziy,5ZCg,6aCs,5YyX,5YOV,5Y2c,5aKo,5pKy,5py0,54mn,552m,56mG,6Yem,5YuD,5rKh,5q6G,5aCA,5bmM,5aWU,5pys,57+7,5Yeh,55uG,5pGp,56Oo,6a2U,6bq7,5Z+L,5aa5,5pin,5p6a,5q+O,5ZOp,5qeZ,5bmV,6Iac,5p6V,6a6q,5p++,6bGS,5qGd,5Lqm,5L+j,5Y+I,5oq5,5pyr,5rKr,6L+E,5L6t,57mt,6bq/,5LiH,5oWi,5rqA',\n  '4c21': '5ryr,6JST,5ZGz,5pyq,6a2F,5bez,566V,5bKs,5a+G,6Jyc,5rmK,6JOR,56iU,6ISI,5aaZ,57KN,5rCR,55yg,5YuZ,5aSi,54Sh,54mf,55+b,6Zyn,6bWh,5qSL,5am/,5aiY,5Yal,5ZCN,5ZG9,5piO,55uf,6L+3,6YqY,6bO0,5aeq,54md,5ruF,5YWN,5qOJ,57a/,57es,6Z2i,6bq6,5pG4,5qih,6IyC,5aaE,5a2f,5q+b,54yb,55uy,57ay,6ICX,6JKZ,5YSy,5pyo,6buZ,55uu,5p2i,5Yu/,6aSF,5bCk,5oi7,57G+,6LKw,5ZWP,5oK2,57SL,6ZaA,5YyB,5Lmf,5Ya2,5aSc,54i6,6IC2,6YeO,5byl,55+i,5Y6E,5b25,57SE,6Jas,6Kiz,6LqN,6Z2W,5p+z,6Jau,6ZGT,5oSJ,5oSI,5rK5,55mS',\n  '4d21': '6Kut,6Ly4,5ZSv,5L2R,5YSq,5YuH,5Y+L,5a6l,5bm9,5oKg,5oaC,5o+W,5pyJ,5p+a,5rmn,5raM,54y2>1,55Sx,56WQ,6KOV,6KqY,6YGK,6YKR,6YO1,6ZuE,6J6N,5aSV,5LqI,5L2Z,5LiO,6KqJ,6Ly/,6aCQ,5YKt,5bm8,5aaW,5a65,5bq4,5o+a,5o+6,5pOB,5puc,5qWK,5qeY,5rSL,5rq2,54aU,55So,56qv,576K,6ICA,6JGJ,6JOJ,6KaB,6Kyh,6LiK,6YGl,6Zm9,6aSK,5oW+,5oqR,5qyy,5rKD,5rW0,57+M,57+8,5reA,576F,6J66,6KO4,5p2l,6I6x,6aC8,6Zu3,5rSb,57Wh,6JC9,6YWq,5Lmx,5Y21,5bWQ,5qyE,5r+r,6JeN,6Jit,6Kan,5Yip,5ZCP,5bGl,5p2O,5qKo,55CG,55KD',\n  '4e21': '55ei,6KOP,6KOh,6YeM,6Zui,6Zm4,5b6L,546H,56uL,6JGO,5o6g,55Wl,5YqJ,5rWB,5rqc,55CJ,55WZ,56Gr,57KS,6ZqG,56uc,6b6N,5L62,5oWu,5peF,6Jmc,5LqG,5Lqu,5YOa,5Lih,5YeM,5a+u,5paZ,5qKB,5ra8,54yf,55mC,556t,56ic,57On,6Imv,6KuS,6YG8,6YeP,6Zm1,6aCY,5Yqb,57eR,5YCr,5Y6Y,5p6X,5reL,54eQ,55Cz,6Ieo,6Lyq,6Zqj,6bGX,6bqf,55Gg,5aGB,5raZ,57Sv,6aGe,5Luk,5Ly2,5L6L,5Ya3,5Yqx,5ba6,5oCc,546y,56S8,6IuT,6Yi0,6Zq3,6Zu2,6ZyK,6bqX,6b2i,5pqm,5q20,5YiX,5Yqj,54OI,6KOC,5buJ,5oGL,5oaQ,5ryj,54WJ,57C+,57e0,6IGv',\n  '4f21': '6JOu,6YCj,6Yys,5ZGC,6a2v,5quT,54KJ,6LOC,6Lev,6Zyy,5Yq0,5amB,5buK,5byE,5pyX,5qW8,5qaU,5rWq,5ryP,54mi,54u8,56+t,6ICB,6IG+,6J2L,6YOO,5YWt,6bqT,56aE,6IKL,6Yyy,6KuW,5YCt,5ZKM,6Kmx,5q2q,6LOE,6ISH,5oOR,5p6g,6bey,5LqZ,5LqY,6bCQ,6Kmr,6JeB,6JWo,5qSA,5rm+,56KX,6IWV',\n  '5a21': '5pOa,5pOS,5pOF,5pOH,5pK7,5pOY,5pOC,5pOx,5pOn,6IiJ,5pOg>1,5oqs,5pOj,5pOv,5pSs,5pO2,5pO0,5pOy,5pO6,5pSA,5pO9,5pSY,5pSc,5pSF,5pSk,5pSj,5pSr,5pS0>1,5pS3,5pS2,5pS4,55WL,5pWI,5pWW,5pWV,5pWN,5pWY,5pWe,5pWd,5pWy,5pW4,5paC>1,6K6K,5pab,5paf,5par,5pa3,5peD,5peG,5peB,5peE,5peM,5peS,5peb,5peZ,5peg>1,5pex,5p2y,5piK,5piD,5pe7,5p2z,5pi1>1,5pi0,5pic,5pmP,5pmE,5pmJ,5pmB,5pme,5pmd,5pmk,5pmn>1,5pmf,5pmi,5pmw,5pqD,5pqI,5pqO,5pqJ,5pqE,5pqY,5pqd,5puB,5pq5,5puJ,5pq+,5pq8',\n  '5b21': '5puE,5pq4,5puW,5pua,5pug,5pi/,5pum,5pup,5puw,5pu1,5pu3,5pyP,5pyW,5pye,5pym>1,6Zy4,5pyu,5py/,5py2,5p2B,5py4,5py3,5p2G,5p2e,5p2g,5p2Z,5p2j>1,5p6J,5p2w,5p6p,5p28,5p2q,5p6M,5p6L,5p6m,5p6h,5p6F,5p63,5p+v,5p60,5p+s,5p6z,5p+p,5p64,5p+k,5p+e,5p+d,5p+i,5p+u,5p65,5p+O,5p+G,5p+n,5qqc,5qCe,5qGG,5qCp,5qGA,5qGN,5qCy,5qGO,5qKz,5qCr,5qGZ,5qGj,5qG3,5qG/,5qKf,5qKP,5qKt,5qKU,5qKd,5qKb,5qKD,5qqu,5qK5,5qG0,5qK1,5qKg,5qK6,5qSP,5qKN,5qG+,5qSB,5qOK,5qSI,5qOY,5qSi,5qSm,5qOh,5qSM,5qON',\n  '5c21': '5qOU,5qOn,5qOV,5qS2,5qSS,5qSE,5qOX,5qOj,5qSl,5qO5,5qOg,5qOv,5qSo,5qSq,5qSa,5qSj,5qSh,5qOG,5qW5,5qW3,5qWc,5qW4,5qWr,5qWU,5qW+,5qWu,5qS5,5qW0,5qS9,5qWZ,5qSw,5qWh,5qWe,5qWd,5qaB,5qWq,5qay,5qau,5qeQ,5qa/,5qeB,5qeT,5qa+,5qeO,5a+o,5qeK,5qed,5qa7,5qeD,5qan,5qiu,5qaR,5qag,5qac,5qaV,5qa0,5qee,5qeo,5qiC,5qib,5qe/,5qyK,5qe5,5qey,5qen,5qiF,5qax,5qie,5qet,5qiU,5qer,5qiK,5qiS,5quB,5qij,5qiT,5qmE,5qiM,5qmy,5qi2,5qm4,5qmH,5qmi,5qmZ,5qmm,5qmI,5qi4,5qii,5qqQ,5qqN,5qqg,5qqE,5qqi>1',\n  '5d21': '5qqX,6JiX,5qq7,5quD,5quC,5qq4,5qqz,5qqs,5que,5quR,5quf,5qqq,5qua,5quq,5qu7,5qyF,6JiW,5qu6,5qyS,5qyW,6ayx,5qyf,5qy4,5qy3,55uc,5qy5,6aOu,5q2H,5q2D,5q2J,5q2Q,5q2Z,5q2U,5q2b,5q2f,5q2h,5q24>1,5q2/,5q6A,5q6E,5q6D,5q6N,5q6Y,5q6V,5q6e,5q6k,5q6q>1,5q6v,5q6y,5q6x,5q6z,5q63,5q68,5q+G,5q+L,5q+T,5q+f,5q+s,5q+r,5q+z,5q+v,6bq+,5rCI,5rCT>1,5rCb,5rCk,5rCj,5rGe,5rGV,5rGi,5rGq,5rKC,5rKN,5rKa,5rKB,5rKb,5rG+,5rGo,5rGz,5rKS,5rKQ,5rOE,5rOx,5rOT,5rK9,5rOX,5rOF,5rOd,5rKu,5rKx,5rK+',\n  '5e21': '5rK6,5rOb,5rOv,5rOZ,5rOq,5rSf,6KGN,5rS2,5rSr,5rS9,5rS4,5rSZ,5rS1,5rSz,5rSS,5rSM,5rWj,5raT,5rWk,5rWa,5rW5,5rWZ,5raO,5raV,5r+k,5raF,5re5,5riV,5riK,5ra1,5reH,5rem,5ra4,5reG,5res,5ree,5reM,5reo,5reS,5reF,5re6,5reZ,5rek,5reV,5req,5reu,5rit,5rmu,5riu,5riZ,5rmy,5rmf,5ri+,5rij,5rmr,5rir,5rm2,5rmN,5rif,5rmD,5ri6,5rmO,5rik,5ru/,5rid,5ri4,5rqC,5rqq,5rqY,5ruJ,5rq3,5ruT,5rq9,5rqv,5ruE,5rqy,5ruU>1,5rqP,5rql,5ruC,5rqf,5r2B,5ryR,54GM,5rus,5ru4,5ru+,5ry/,5ruy,5ryx,5ruv,5ryy,5ruM',\n  '5f21': '5ry+,5ryT,5ru3,5r6G,5r26,5r24,5r6B,5r6A,5r2v,5r2b,5r+z,5r2t,5r6C,5r28,5r2Y,5r6O,5r6R,5r+C,5r2m,5r6z,5r6j,5r6h,5r6k,5r65,5r+G,5r6q,5r+f,5r+V,5r+s,5r+U,5r+Y,5r+x,5r+u,5r+b,54CJ,54CL,5r+6,54CR,54CB,54CP,5r++,54Cb,54Ca,5r20,54Cd,54CY,54Cf,54Cw,54C+,54Cy,54GR,54Gj,54KZ,54KS,54Kv,54Ox,54Ks,54K4,54Kz,54Ku,54Of,54OL,54Od,54OZ,54SJ,54O9,54Sc,54SZ,54Wl,54WV,54aI,54Wm,54Wi,54WM,54WW,54Ws,54aP,54e7,54aE,54aV,54ao,54as,54eX,54a5,54a+,54eS,54eJ,54eU,54eO,54eg,54es,54en,54e1,54e8',\n  '6a21': '6J2T,6J2j,6J2q,6KCF,6J6i,6J6f,6J6C,6J6v,6J+L,6J69,6J+A,6J+Q,6ZuW,6J6r,6J+E,6J6z,6J+H,6J+G,6J67,6J+v,6J+y,6J+g,6KCP,6KCN,6J++,6J+2>1,6KCO,6J+S,6KCR,6KCW,6KCV,6KCi,6KCh,6KCx,6KC2,6KC5,6KCn,6KC7,6KGE,6KGC,6KGS,6KGZ,6KGe,6KGi,6KGr,6KKB,6KG+,6KKe,6KG1,6KG9,6KK1,6KGy,6KKC,6KKX,6KKS,6KKu,6KKZ,6KKi,6KKN,6KKk,6KKw,6KK/,6KKx,6KOD>1,6KOU,6KOY>1,6KOd,6KO5,6KSC,6KO8,6KO0,6KOo,6KOy,6KSE,6KSM,6KSK,6KST,6KWD,6KSe,6KSl,6KSq>1,6KWB,6KWE,6KS7,6KS2,6KS4,6KWM,6KSd,6KWg,6KWe',\n  '6b21': '6KWm,6KWk,6KWt,6KWq,6KWv,6KW0,6KW3,6KW+,6KaD,6KaI,6KaK,6KaT,6KaY,6Kah,6Kap,6Kam,6Kas,6Kav,6Kay,6Ka6,6Ka9,6Ka/,6KeA,6Kea,6Kec>1,6Ken,6Ke0,6Ke4,6KiD,6KiW,6KiQ,6KiM,6Kib,6Kid,6Kil,6Ki2,6KmB,6Kmb,6KmS,6KmG,6KmI,6Km8,6Kmt,6Kms,6Kmi,6KqF,6KqC,6KqE,6Kqo,6Kqh,6KqR,6Kql>1,6Kqa,6Kqj,6KuE,6KuN,6KuC,6Kua,6Kur,6Kuz,6Kun,6Kuk,6Kux,6KyU,6Kug,6Kui,6Ku3,6Kue,6Kub,6KyM,6KyH,6Kya,6Kuh,6KyW,6KyQ,6KyX,6Kyg,6Kyz,6Z6r,6Kym,6Kyr,6Ky+,6Kyo,6K2B,6K2M,6K2P,6K2O,6K2J,6K2W,6K2b,6K2a,6K2r',\n  '6c21': '6K2f,6K2s,6K2v,6K20,6K29,6K6A,6K6M,6K6O,6K6S>1,6K6W,6K6Z>1,6LC6,6LGB,6LC/,6LGI,6LGM,6LGO,6LGQ,6LGV,6LGi,6LGs,6LG4,6LG6,6LKC,6LKJ,6LKF,6LKK,6LKN>1,6LKU,6LG8,6LKY,5oid,6LKt,6LKq,6LK9,6LKy>1,6LKu,6LK2,6LOI,6LOB,6LOk,6LOj,6LOa,6LO9,6LO6>1,6LSE>1,6LSK,6LSH,6LSP,6LSN,6LSQ,6b2O,6LST,6LON,6LSU,6LSW,6LWn,6LWt,6LWx,6LWz,6LaB,6LaZ,6LeC,6La+,6La6,6LeP,6Lea,6LeW,6LeM,6Leb,6LeL,6Leq>1,6Lef,6Lej,6Le8,6LiI>1,6Le/,6Lid>1,6LiQ,6Lif,6LmC,6Li1,6Liw,6Li0,6LmK',\n  '6d21': '6LmH,6LmJ,6LmM,6LmQ,6LmI,6LmZ,6Lmk,6Lmg,6Liq,6Lmj,6LmV,6Lm2,6Lmy,6Lm8,6LqB,6LqH,6LqF,6LqE,6LqL,6LqK,6LqT,6LqR,6LqU,6LqZ,6Lqq,6Lqh,6Lqs,6Lqw,6LuG,6Lqx,6Lq+,6LuF,6LuI,6LuL,6Lub,6Luj,6Lu8,6Lu7,6Lur,6Lu+,6LyK,6LyF,6LyV,6LyS,6LyZ,6LyT,6Lyc,6Lyf,6Lyb,6LyM,6Lym,6Lyz,6Ly7,6Ly5,6L2F,6L2C,6Ly+,6L2M,6L2J,6L2G,6L2O,6L2X,6L2c,6L2i>2,6L6c,6L6f,6L6j,6L6t,6L6v,6L63,6L+a,6L+l,6L+i,6L+q,6L+v,6YKH,6L+0,6YCF,6L+5>1,6YCR,6YCV,6YCh,6YCN,6YCe,6YCW,6YCL,6YCn,6YC2,6YC1,6YC5,6L+4',\n  '6e21': '6YGP>3,6YCO,6YGJ,6YC+,6YGW,6YGY,6YGe,6YGo,6YGv,6YG2,6Zqo,6YGy,6YKC,6YG9,6YKB,6YKA,6YKK,6YKJ,6YKP,6YKo,6YKv,6YKx,6YK1,6YOi,6YOk,5omI,6YOb,6YSC,6YSS,6YSZ,6YSy,6YSw,6YWK,6YWW,6YWY,6YWj,6YWl,6YWp,6YWz,6YWy,6YaL,6YaJ,6YaC,6Yai,6Yar,6Yav,6Yaq,6Ya1,6Ya0,6Ya6,6YeA>1,6YeJ,6YeL,6YeQ,6YeW,6Yef,6Yeh,6Yeb,6Ye8,6Ye1>1,6Yie,6Ye/,6YiU,6Yis,6YiV,6YiR,6Yme,6YmX,6YmF,6YmJ,6Ymk,6YmI,6YqV,6Yi/,6YmL,6YmQ,6Yqc,6YqW,6YqT,6Yqb,6Yma,6YuP,6Yq5,6Yq3,6Yup,6YyP,6Yu6,6Y2E,6Yyu',\n  '6f21': '6YyZ,6Yyi,6Yya,6Yyj,6Yy6,6Yy1,6Yy7,6Y2c,6Y2g,6Y28,6Y2u,6Y2W,6Y6w,6Y6s>1,6Y6U,6Y65,6Y+W>1,6Y+o,6Y+l,6Y+Y,6Y+D,6Y+d,6Y+Q,6Y+I,6Y+k,6ZCa,6ZCU,6ZCT,6ZCD,6ZCH,6ZCQ,6ZC2,6ZCr,6ZC1,6ZCh,6ZC6,6ZGB,6ZGS,6ZGE,6ZGb,6ZGg,6ZGi,6ZGe,6ZGq,6Yip,6ZGw,6ZG1,6ZG3,6ZG9,6ZGa,6ZG8,6ZG+,6ZKB,6ZG/,6ZaC,6ZaH,6ZaK,6ZaU,6ZaW,6ZaY>1,6Zag,6Zao,6Zan,6Zat,6Za8,6Za7,6Za5,6Za+,6ZeK,5r+2,6ZeD,6ZeN,6ZeM,6ZeV,6ZeU,6ZeW,6Zec,6Zeh,6Zel,6Zei,6Zih,6Zio,6Ziu>1,6ZmC,6ZmM,6ZmP,6ZmL,6Zm3,6Zmc,6Zme',\n  '7a21': '5b+e,5oGd,5oKF,5oKK,5oOe,5oOV,5oSg,5oOy,5oSR,5oS3,5oSw,5oaY,5oiT,5oqm,5o+1,5pGg,5pKd,5pOO,5pWO,5piA,5piV,5pi7,5piJ,5piu,5pie,5pik,5pml,5pmX,5pmZ,76iS,5pmz,5pqZ,5pqg,5pqy,5pq/,5pu6,5pyO,76Sp,5p2m,5p67,5qGS,5p+A,5qCB,5qGE,5qOP,76iT,5qWo,76iU,5qaY,5qei,5qiw,5qmr,5qmG,5qmz,5qm+,5qui,5quk,5q+W,5rC/,5rGc,5rKG,5rGv,5rOa,5rSE,5raH,5rWv,5raW,5ras,5reP,5re4,5rey,5re8,5ri5,5rmc,5rin,5ri8,5rq/,5r6I,5r61,5r+1,54CF,54CH,54Co,54KF,54Kr,54SP,54SE,54Wc,54WG>1,76iV,54eB,54e+,54qx',\n  '7b21': '54q+,54yk,76iW,5423,5469,54+J,54+W,54+j,54+S,55CH,54+1,55Cm,55Cq,55Cp,55Cu,55Gi,55KJ,55Kf,55SB,55Wv,55qC,55qc,55qe,55qb,55qm,76iX,552G,5Yqv,56Ch,56GO,56Gk,56G6,56Sw,76iY>2,56aU,76ib,56ab,56uR,56un,76ic,56ur,566e,76id,57WI,57Wc,57a3,57ag,57eW,57mS,572H,576h,76ie,6IyB,6I2i,6I2/,6I+H,6I+2,6JGI,6JK0,6JWT,6JWZ,6JWr,76if,6Jaw,76ig>1,6KCH,6KO1,6KiS,6Ki3,6Km5,6Kqn,6Kq+,6Kuf,76ii,6Ku2,6K2T,6K2/,6LOw,6LO0,6LSS,6LW2,76ij,6LuP,76ik>1,6YGn,6YOe,76im,6YSV,6YSn,6Yea',\n  '7c21': '6YeX,6Yee,6Yet>1,6Yek>1,6YiG,6YiQ,6YiK,6Yi6,6YmA,6Yi8,6YmO,6YmZ,6YmR,6Yi5,6Ymn,6Yqn,6Ym3>1,6Yun,6YuX,6YuZ,6YuQ,76in,6YuV,6Yug,6YuT,6Yyl,6Yyh,6Yu7,76io,6Yye,6Yu/,6Yyd,6YyC,6Y2w,6Y2X,6Y6k,6Y+G,6Y+e,6Y+4,6ZCx,6ZGF,6ZGI,6ZaS,76ec,76ip,6Zqd,6Zqv,6Zyz,6Zy7,6Z2D,6Z2N,6Z2P,6Z2R,6Z2V,6aGX,6aGl,76iq>1,6aSn,76is,6aae,6amO,6auZ,6auc,6a21,6a2y,6a6P,6a6x,6a67,6bCA,6bWw,6bWr,76it,6biZ,6buR',\n  '7c71': '4oWw>9',\n  '7c7c': '77+k,77yH,77yC',\n  '1215d': '4oiS',\n}\n", "import { base64ToHex } from './text-decode-encode.util.js'\nimport UTF8_TO_JIS_TABLE from './utf8-to-jis-table.constants.js'\n\n/** @param {string} x - hex string */\nconst xInt = x => parseInt(x, 16)\n/** @param {string} x - base64 string */\nconst b64Int = x => xInt(base64ToHex(x))\n\n/** @typedef {{[key: string]: string}} CompressedTable */\n/** @typedef {{[utf8Value: number]: number}} Utf8ToJisTable */\n\n/**\n * @param {CompressedTable} compressedTable - target table\n * @returns {Utf8ToJisTable} decompressed table\n */\nfunction decompressUtf8ToJisTable (compressedTable) {\n  /** @type {Record<number, number>} */\n  const result = {}\n  for (const [jisChar, utf8ValsStr] of Object.entries(compressedTable)) {\n    const utf8Vals = utf8ValsStr.split(',')\n    let charIterator = xInt(jisChar)\n    for (const utf8Value of utf8Vals) {\n      if (utf8Value.includes(':')) {\n        utf8Value.split(':').map(b64Int).forEach(key => { result[key] = charIterator })\n        charIterator++\n      } else if (utf8Value.includes('>')) {\n        const kv = utf8Value.split('>')\n        const init = b64Int(kv[0])\n        for (let i = 0, e = xInt(kv[1]); i <= e; ++i) {\n          result[init + i] = charIterator++\n        }\n      } else {\n        result[b64Int(utf8Value)] = charIterator++\n      }\n    }\n  }\n  return result\n}\n\n/** @type {(x:CompressedTable) => {Utf8ToJisTable: () => Utf8ToJisTable}} x  */\nexport const usingTable = (compressedTable) => {\n  let generatedTable = null\n  return {\n    Utf8ToJisTable () {\n      generatedTable ??= decompressUtf8ToJisTable(compressedTable)\n      return generatedTable\n    },\n  }\n}\n\nexport const getUtf8ToJisTable = usingTable(UTF8_TO_JIS_TABLE).Utf8ToJisTable\n", "import { getUtf8ToJisTable } from './utf8-to-jis-table.js'\n\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\nconst sjisDecoder = new TextDecoder('sjis')\n\n/**\n * @param {string} str - input text\n * @returns {Uint8Array} utf8 encoded byte array\n */\nexport const textToBytes = (str) => encoder.encode(str)\n\n/**\n * @param {Uint8Array} bytes - utf8 encoded byte array\n * @returns {string} decoded output\n */\nexport const bytesToText = (bytes) => decoder.decode(bytes)\n\n/**\n * @param {string} base64 - input base64 text\n * @returns {Uint8Array} byte array\n */\nexport const base64ToBytes = (base64) => Uint8Array.from(atob(base64), (m) => /** @type {number} */(m.codePointAt(0)))\n\n/**\n * @param {Uint8Array} bytes - byte array\n * @returns {string} base64 text\n */\nexport const bytesToBase64 = (bytes) => btoa(Array.from(bytes, (x) => String.fromCodePoint(x)).join(''))\n\n/**\n * @param {string} str - input text\n * @returns {string} encoded input text in base64\n */\nexport const textToBase64 = (str) => bytesToBase64(encoder.encode(str))\n\n/**\n * @param {string} base64 - input base64 text\n * @returns {string} decoded input text\n */\nexport const base64ToText = (base64) => decoder.decode(base64ToBytes(base64))\n\n/**\n * @param {string} hex - hex string\n * @returns {string} converted string in base64\n */\nexport const hexToBase64 = (hex) => bytesToBase64(hexToBytes(hex))\n\n/**\n * @param {string} base64 - input base64 text\n * @returns {string} converted string in hexadecimal\n */\nexport const base64ToHex = (base64) => bytesToHex(base64ToBytes(base64))\n\n/**\n * @param {string} hex - hex string\n * @returns {Uint8Array} byte array\n */\nexport function hexToBytes (hex) {\n  const bytes = []\n  for (let c = 0, e = hex.length; c < e; c += 2) {\n    bytes.push(parseInt(hex.substring(c, c + 2), 16))\n  }\n  return Uint8Array.from(bytes)\n}\n\n/**\n * @param {Uint8Array} bytes - byte array\n * @returns {string} hex string\n */\nexport const bytesToHex = (bytes) => Array.from(bytes).map(byte => ((byte + 256) & 0xff).toString(16)).join('')\n\n/**\n * @param {string} str - input text\n * @returns {Uint8Array} SJIS encoded byte array\n */\nexport const textToSjisBytes = (str) => UTF8ToSJIS(textToBytes(str))\n\n/**\n * @param {Uint8Array} bytes - SJIS encoded byte array\n * @returns {string} decoded output\n */\nexport const sjisBytesToText = (bytes) => sjisDecoder.decode(bytes)\n\n/**\n * @param {Uint8Array} data - utf8 encoded byte array\n * @returns {Uint8Array} SJIS encoded byte array\n */\n// eslint-disable-next-line sonarjs/cognitive-complexity -- its low level, it is meant to be complex\nfunction UTF8ToSJIS (data) {\n  const FALLBACK_CHARACTER = 63 // '?'\n  const UTF8_TO_JIS_TABLE = getUtf8ToJisTable()\n\n  /** @type {number[]} */\n  const results = []\n  const len = data && data.length\n  let b1, b2, utf8, jis\n\n  for (let i = 0; i < len; i++) {\n    const b = data[i]\n\n    if (b >= 0x80) {\n      if (b <= 0xDF) {\n        // 2 bytes\n        utf8 = (b << 8) + data[++i]\n      } else if (b <= 0xEF) {\n        // 3 bytes\n        utf8 = (b << 16) +\n               (data[++i] << 8) +\n               (data[++i] & 0xFF)\n      } else {\n        // 4 bytes\n        utf8 = (b << 24) +\n               (data[++i] << 16) +\n               (data[++i] << 8) +\n               (data[++i] & 0xFF)\n      }\n\n      jis = UTF8_TO_JIS_TABLE[utf8]\n      if (jis == null) {\n        results[results.length] = FALLBACK_CHARACTER\n      } else {\n        if (jis < 0xFF) {\n          results[results.length] = jis + 0x80\n        } else {\n          if (jis > 0x10000) {\n            jis -= 0x10000\n          }\n\n          b1 = jis >> 8\n          b2 = jis & 0xFF\n          if (b1 & 0x01) {\n            b1 >>= 1\n            if (b1 < 0x2F) {\n              b1 += 0x71\n            } else {\n              b1 -= 0x4F\n            }\n\n            if (b2 > 0x5F) {\n              b2 += 0x20\n            } else {\n              b2 += 0x1F\n            }\n          } else {\n            b1 >>= 1\n            if (b1 <= 0x2F) {\n              b1 += 0x70\n            } else {\n              b1 -= 0x50\n            }\n            b2 += 0x7E\n          }\n          results[results.length] = b1 & 0xFF\n          results[results.length] = b2 & 0xFF\n        }\n      }\n    } else {\n      results[results.length] = data[i] & 0xFF\n    }\n  }\n\n  return Uint8Array.from(results)\n}\n", "import { MODE_KANJI } from './mode-bits.constants.js'\nimport { textToSjisBytes } from '../utils/text-decode-encode.util.js'\n\n/**\n * Create QR code Kanji mode object\n * @param {string} data - data of mode object\n * @returns {import('./mode-bits.constants.js').ModeObject & {readonly bytes: Uint8Array}} created mode object\n */\nexport const QrKanji = (data) => {\n  const bytes = textToSjisBytes(data)\n  return Object.freeze({\n    data,\n    bytes,\n    mode: MODE_KANJI,\n    length: ~~(bytes.length / 2),\n    write: writeDataToBitBuffer.bind(null, bytes),\n  })\n}\n\n/**\n * Writes kanji data to bit buffer that will be used to generate the QR code\n * @param {Uint8Array} bytes - QrKanji mode object data byte array\n * @param {import(\"./../utils/qr-bit-buffer.js\").QrBitBuffer} buffer - target bit buffer\n */\nfunction writeDataToBitBuffer (bytes, buffer) {\n  let i = 0\n\n  while (i + 1 < bytes.length) {\n    let c = ((0xff & bytes[i]) << 8) | (0xff & bytes[i + 1])\n\n    if (c >= 0x8140 && c <= 0x9FFC) {\n      c -= 0x8140\n    } else if (c >= 0xE040 && c <= 0xEBBF) {\n      c -= 0xC140\n    } else {\n      throw Error(`illegal char at ${i + 1}/${c}`)\n    }\n\n    c = ((c >>> 8) & 0xff) * 0xC0 + (c & 0xff)\n    buffer.put(c, 13)\n    i += 2\n  }\n\n  if (i < bytes.length) {\n    throw Error(`illegal char at ${i + 1}`)\n  }\n}\n\n/**\n * @param {string} text - text to validate\n * @returns {import('./mode-bits.constants.js').ModeObject & {readonly bytes: Uint8Array} | null} created mode object or null if invalid\n */\nexport function getValidQrKanjiOrNull (text) {\n  const modeObject = QrKanji(text)\n  const { bytes } = modeObject\n\n  let i = 0\n\n  while (i + 1 < bytes.length) {\n    let c = ((0xff & bytes[i]) << 8) | (0xff & bytes[i + 1])\n\n    if (c >= 0x8140 && c <= 0x9FFC) {\n      c -= 0x8140\n    } else if (c >= 0xE040 && c <= 0xEBBF) {\n      c -= 0xC140\n    } else {\n      return null\n    }\n\n    c = ((c >>> 8) & 0xff) * 0xC0 + (c & 0xff)\n    i += 2\n  }\n  return i >= bytes.length ? modeObject : null\n}\n", "import { MODE_8BIT_BYTE } from './mode-bits.constants.js'\nimport { textToBytes } from '../utils/text-decode-encode.util.js'\n\n/**\n * Create QR code byte mode object\n * @param {string} data - data of mode object\n * @returns {import('./mode-bits.constants.js').ModeObject} created mode object\n */\nexport const Qr8BitByte = (data) => Object.freeze({\n  data,\n  mode: MODE_8BIT_BYTE,\n  length: data.length,\n  write: writeDataToBitBuffer.bind(null, textToBytes(data)),\n})\n\n/**\n * Writes byte data to bit buffer that will be used to generate the QR code\n * @param {Uint8Array} data - Qr8BitByte mode object data byte array\n * @param {import(\"./../utils/qr-bit-buffer.js\").QrBitBuffer} buffer - target bit buffer\n */\nfunction writeDataToBitBuffer (data, buffer) {\n  for (const byte of data) {\n    buffer.put(byte, 8)\n  }\n}\n", "import { MODE_NUMBER } from './mode-bits.constants.js'\n\n/**\n * Create QR code numeric mode object\n * @param {string} data - data of mode object\n * @returns {import('./mode-bits.constants.js').ModeObject} created mode object\n */\nexport const QrNumber = (data) => Object.freeze({\n  data,\n  mode: MODE_NUMBER,\n  length: data.length,\n  write: writeDataToBitBuffer.bind(null, data),\n})\n\n/**\n * Writes numeric data to bit buffer that will be used to generate the QR code\n * @param {string} data - QrNumber mode object data\n * @param {import(\"./../utils/qr-bit-buffer.js\").QrBitBuffer} buffer - target bit buffer\n */\nfunction writeDataToBitBuffer (data, buffer) {\n  let i = 0\n\n  while (i + 2 < data.length) {\n    buffer.put(strToNum(data.substring(i, i + 3)), 10)\n    i += 3\n  }\n\n  if (i < data.length) {\n    if (data.length - i === 1) {\n      buffer.put(strToNum(data.substring(i, i + 1)), 4)\n    } else if (data.length - i === 2) {\n      buffer.put(strToNum(data.substring(i, i + 2)), 7)\n    }\n  }\n}\n\n/**\n * @param {string} s - target string\n * @returns {number} `s` as number\n */\nfunction strToNum (s) {\n  let num = 0\n  for (let i = 0, e = s.length; i < e; i++) {\n    num = num * 10 + charToNum(s.charAt(i))\n  }\n  return num\n};\n\n/**\n *\n * @param {string} c - target character\n * @returns {number} `c` as number\n */\nfunction charToNum (c) {\n  if (c >= '0' && c <= '9') {\n    return c.charCodeAt(0) - zeroCharCode\n  }\n  throw Error(`illegal char: ${c}`)\n};\n\nconst zeroCharCode = '0'.charCodeAt(0)\n", "import { MODE_ALPHA_NUM } from './mode-bits.constants.js'\n\n/**\n * Create QR code alphanumeric mode object\n * @param {string} data - data of mode object\n * @returns {import('./mode-bits.constants.js').ModeObject} created mode object\n */\nexport const QrAlphaNum = (data) => Object.freeze({\n  data,\n  mode: MODE_ALPHA_NUM,\n  length: data.length,\n  write: writeDataToBitBuffer.bind(null, data),\n})\n\n/**\n * Writes alphanumeric data to bit buffer that will be used to generate the QR code\n * @param {string} data - QrAlphaNum mode object data\n * @param {import(\"./../utils/qr-bit-buffer.js\").QrBitBuffer} buffer - target bit buffer\n */\nfunction writeDataToBitBuffer (data, buffer) {\n  let i = 0\n\n  while (i + 1 < data.length) {\n    buffer.put(\n      getCode(data.charAt(i)) * 45 +\n          getCode(data.charAt(i + 1)), 11)\n    i += 2\n  }\n\n  if (i < data.length) {\n    buffer.put(getCode(data.charAt(i)), 6)\n  }\n}\n\n/**\n * Get value for character `c`\n * @param {string} c - target character\n * @returns {number} character code point\n */\nfunction getCode (c) {\n  if (c >= '0' && c <= '9') {\n    return c.charCodeAt(0) - '0'.charCodeAt(0)\n  } else if (c >= 'A' && c <= 'Z') {\n    return c.charCodeAt(0) - 'A'.charCodeAt(0) + 10\n  } else {\n    switch (c) {\n      case ' ' : return 36\n      case '$' : return 37\n      case '%' : return 38\n      case '*' : return 39\n      case '+' : return 40\n      case '-' : return 41\n      case '.' : return 42\n      case '/' : return 43\n      case ':' : return 44\n      default :\n        throw Error(`illegal char: ${c}`)\n    }\n  }\n}\n", "import { QrNumber } from './number.mode.js'\nimport { QrAlphaNum } from './alphanum.mode.js'\nimport { getValidQrKanjiOrNull } from './kanji.mode.js'\nimport { Qr8BitByte } from './byte.mode.js'\n\n/**\n * Create QR code Kanji mode object\n * @param {string} data - data of mode object\n * @returns {import('./mode-bits.constants.js').ModeObject} get best matching mode\n */\nexport function getBestMode (data) {\n  if (/^\\d+$/.test(data)) {\n    return QrNumber(data)\n  }\n  if (/^[0-9A-Z $%*+-./:]+$/.test(data)) {\n    return QrAlphaNum(data)\n  }\n  return getValidQrKanjiOrNull(data) ?? Qr8BitByte(data)\n}\n", "import { ECBlocksInfo } from './error-correction/qr-ec-block.utils.js'\nimport { fromString, CORRECTION_LEVEL_M } from './error-correction/ec-level.js'\nimport { getLengthInBits, getPatternPosition, getBCHTypeInfo, getBCHTypeNumber, getMaskFunction } from './utils/qr-util.js'\nimport { createData } from './utils/create-data.util.js'\nimport { QrKanji } from './modes/kanji.mode.js'\nimport { Qr8BitByte } from './modes/byte.mode.js'\nimport { QrNumber } from './modes/number.mode.js'\nimport { QrAlphaNum } from './modes/alphanum.mode.js'\nimport { getBestMode } from './modes/mode-utils.util.js'\nimport { QrBitBuffer } from './utils/qr-bit-buffer.js'\n\nexport class QrCode {\n  /** @type {number} */\n  typeNumber = 0\n\n  /** @type {number} */\n\n  errorCorrectionLevel\n  /**\n   * module count is the amount of modules in the QR Code\n   * The module refers to the black and white dots that make up QR Code.\n   * @example moduleCount = 21 // QR code is a 21x21 matrix\n   */\n  moduleCount\n  modules\n  /** @type {number[] | null} */\n  #dataCache\n  /** @type {ReturnType<QrKanji | Qr8BitByte | QrNumber | QrAlphaNum>[] } */\n  dataList\n\n  /**\n   * @param {number} typeNumber - QR code version from 1 to 40\n   * @param {string} errorCorrectionLevel - error correction level, accepted values (case insensitive): l, low, m, medium, q, quartile, h, high\n   */\n  constructor (typeNumber = 0, errorCorrectionLevel = '') {\n    this.typeNumber = typeNumber ?? 0\n    this.errorCorrectionLevel = errorCorrectionLevel ? fromString(errorCorrectionLevel).bit : CORRECTION_LEVEL_M\n    this.moduleCount = 0\n    this.modules = createModuleTable(this.moduleCount)\n    this.#dataCache = null\n    this.dataList = []\n  }\n\n  /**\n   *\n   * @param {boolean} test - flag to determine if it is used for mask pattern evaluation\n   * @param {number} maskPattern - mask pattern to use\n   */\n  makeImpl (test, maskPattern) {\n    this.moduleCount = this.typeNumber * 4 + 17\n\n    const moduleCount = this.moduleCount\n    this.modules = createModuleTable(moduleCount)\n    setupPositionProbePatterns(this)\n    setupPositionAdjustPattern(this)\n    setupTimingPattern(this)\n    setupTypeInfo(test, maskPattern, this)\n\n    if (this.typeNumber >= 7) {\n      setupTypeNumber(test, this)\n    }\n\n    if (this.#dataCache == null) {\n      this.#dataCache = createData(this.typeNumber, this.errorCorrectionLevel, this.dataList)\n    }\n\n    mapData(this.#dataCache, maskPattern, this)\n  };\n\n  /**\n   * @param {number} row - vertical position\n   * @param {number} col - horizontal position\n   * @returns {boolean} true if cell is a dark spot, false otherwise\n   */\n  isDark (row, col) {\n    const { modules, moduleCount } = this\n\n    if (row < 0 || moduleCount <= row || col < 0 || moduleCount <= col) {\n      throw Error(`out of bounds row: ${row}, column: ${col}, module count: ${moduleCount}`)\n    }\n    return modules[row][col]\n  };\n\n  /**\n   *\n   * @param {string} data - text data\n   * @param {'Byte'|'Numeric'|'Alphanumeric'|'Kanji'} [mode] - qr mode to use, uses best mode if absent\n   */\n  addData (data, mode) {\n    switch (mode) {\n      case 'Numeric' : this.dataList.push(QrNumber(data)); break\n      case 'Alphanumeric' : this.dataList.push(QrAlphaNum(data)); break\n      case 'Byte' : this.dataList.push(Qr8BitByte(data)); break\n      case 'Kanji' : this.dataList.push(QrKanji(data)); break\n      case null:\n      case undefined: this.dataList.push(getBestMode(data)); break\n      default : throw Error(`invalid mode \"${mode}\"`)\n    }\n\n    this.#dataCache = null\n  };\n\n  make () {\n    if (this.typeNumber < 1) {\n      this.typeNumber = getBestTypeNumber(this)\n    }\n    this.makeImpl(false, getBestMaskPattern(this))\n  };\n}\n\n/**\n * Gets the position of position detection pattern for the QR Code and draws them\n * @see drawPositionProbePattern to get more infomation about position detection pattern\n * @param {QrCode} qrcode - qr code object\n */\nfunction setupPositionProbePatterns (qrcode) {\n  const { moduleCount } = qrcode\n  drawPositionProbePattern(qrcode, 0, 0)\n  drawPositionProbePattern(qrcode, moduleCount - 7, 0)\n  drawPositionProbePattern(qrcode, 0, moduleCount - 7)\n};\n\n/**\n * Draws a position detection pattern, one of three identical components of the Finder Pattern, normally on the top left, top right and bottom left\n * They require a blank space as separators for Position Detection Patterns\n * @example top right position detection pattern\n *   \u250C\u2500 blank space separator\n *   \u2502 \u250C\u2500 (row, col)\n *   v v\n * \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n *     \u2588\u2588          \u2588\u2588\n * \u2588\u2588  \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\n *     \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\n * \u2588\u2588  \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\n * \u2588\u2588  \u2588\u2588          \u2588\u2588\n *     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n * \u2588\u2588                 <- blank space separator\n *   \u2588\u2588   \u2588\u2588   \u2588\u2588  \u2588\u2588\n * @param {QrCode} qrcode - qr code object\n * @param {number} row - row position of the left part of the rectangle, see example\n * @param {number} col - column position of the left part of the rectangle, see example\n */\nfunction drawPositionProbePattern (qrcode, row, col) {\n  const { modules, moduleCount } = qrcode\n  const rowMin = row === 0 ? 0 : -1\n  const rowMax = row + 7 >= moduleCount ? moduleCount - row - 1 : 7\n  const colMin = col === 0 ? 0 : -1\n  const colMax = col + 7 >= moduleCount ? moduleCount - col - 1 : 7\n\n  for (let r = rowMin; r <= rowMax; r += 1) {\n    for (let c = colMin; c <= colMax; c += 1) {\n      const isDarkSpot = (\n        (r >= 0 && r <= 6 && (c === 0 || c === 6)) ||\n          (c >= 0 && c <= 6 && (r === 0 || r === 6)) ||\n          (r >= 2 && r <= 4 && c >= 2 && c <= 4)\n      )\n      modules[row + r][col + c] = isDarkSpot\n    }\n  }\n};\n\n/**\n * @param {QrCode} qrcode - qr code object\n * @returns {number} type number\n */\nfunction getBestTypeNumber (qrcode) {\n  const { errorCorrectionLevel, dataList } = qrcode\n\n  for (let typeNumber = 1; typeNumber < 40; typeNumber++) {\n    const ecBlocksInfo = ECBlocksInfo(typeNumber, errorCorrectionLevel)\n    const buffer = new QrBitBuffer()\n\n    for (let i = 0; i < dataList.length; i++) {\n      const data = dataList[i]\n      buffer.put(data.mode, 4)\n      buffer.put(data.length, getLengthInBits(data.mode, typeNumber))\n      data.write(buffer)\n    }\n\n    if (buffer.bitLength <= ecBlocksInfo.totalDcCount * 8) {\n      return typeNumber\n    }\n  }\n\n  throw Error('data length too high to detect type number')\n}\n\n/**\n * @param {number} moduleCount - module count of a size of the matrix\n * @returns {boolean[][]} module table\n */\nfunction createModuleTable (moduleCount) {\n  const modules = new Array(moduleCount)\n  for (let row = 0; row < moduleCount; row += 1) {\n    modules[row] = new Array(moduleCount).fill(null)\n  }\n  return modules\n}\n\n/**\n * @param {QrCode} qrcode - qr code object\n * @returns {number} - byte value of mask pattern with less penalty points\n */\nfunction getBestMaskPattern (qrcode) {\n  let minLostPoint = 0\n  let pattern = 1\n  for (let i = 0; i < 8; i += 1) {\n    qrcode.makeImpl(true, i)\n\n    const lostPoint = getLostPoint(qrcode)\n\n    if (i === 0 || minLostPoint > lostPoint) {\n      minLostPoint = lostPoint\n      pattern = i\n    }\n  }\n\n  return pattern\n}\n\n/**\n * Gets the position of alignment patterns for the QR Code and draws them (the small rectangles in the rectangles in the QR Code)\n * @see paintAlignmentPattern to get more infomation about alignment patterns\n * @param {QrCode} qrcode - qr code object\n */\nfunction setupPositionAdjustPattern (qrcode) {\n  const { modules } = qrcode\n\n  const pos = getPatternPosition(qrcode.typeNumber)\n\n  for (let i = 0; i < pos.length; i += 1) {\n    for (let j = 0; j < pos.length; j += 1) {\n      const row = pos[i]\n      const col = pos[j]\n\n      if (modules[row][col] != null) {\n        continue\n      }\n\n      paintAlignmentPattern(qrcode, row, col)\n    }\n  }\n}\n\n/**\n * Draws an alignment pattern.\n *\n * Alignment pattern is a fixed reference pattern in defined positions in a matrix symbology,\n * which enables the decode software to resynchronise the coordinate mapping of the image modules\n * in the event of moderate amounts of distortion of the image\n * @example\n * \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n * \u2588\u2588      \u2588\u2588\n * \u2588\u2588  \u2588\u2588  \u2588\u2588\n * \u2588\u2588      \u2588\u2588\n * \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n * @param {QrCode} qrcode - qr code object\n * @param {number} row - row position of the center of alignment pattern\n * @param {number} col - column position of the center of alignment pattern\n */\nfunction paintAlignmentPattern (qrcode, row, col) {\n  const { modules } = qrcode\n\n  for (let r = -2; r <= 2; r += 1) {\n    for (let c = -2; c <= 2; c += 1) {\n      if (r === -2 || r === 2 || c === -2 || c === 2 || (r === 0 && c === 0)) {\n        modules[row + r][col + c] = true\n      } else {\n        modules[row + r][col + c] = false\n      }\n    }\n  }\n}\n\n/**\n * Draw the QR code timing pattern.\n *\n * A timing Pattern is an alternating sequence of dark and light modules enabling module\n * coordinates in the symbol to be determined.\n * @example\n *                avoid drawing on\n *               alignment patterns\n * \u2588\u2580\u2580\u2580\u2580\u2580\u2588               v               \u2588\u2580\u2580\u2580\u2580\u2580\u2588\n * \u2588 \u2588\u2588\u2588 \u2588             \u2584\u2584\u2584\u2584\u2584             \u2588 \u2588\u2588\u2588 \u2588\n * \u2588 \u2580\u2580\u2580 \u2588 \u2584 \u2584 \u2584 \u2584 \u2584 \u2584 \u2588 \u2584 \u2588 \u2584 \u2584 \u2584 \u2584 \u2584 \u2584 \u2588 \u2580\u2580\u2580 \u2588\n * \u2580\u2580\u2580\u2580\u2580\u2580\u2580     ^       \u2588\u2584\u2584\u2584\u2588   ^         \u2580\u2580\u2580\u2580\u2580\u2580\u2580\n *      \u2580   < timing patterns \u2500\u2518\n *      \u2580\n *      \u2580\n * @param {QrCode} qrcode - qr code object\n */\nfunction setupTimingPattern (qrcode) {\n  const { modules, moduleCount } = qrcode\n\n  for (let r = 8; r < moduleCount - 8; r += 1) {\n    if (modules[r][6] != null) {\n      continue\n    }\n    modules[r][6] = (r % 2 === 0)\n  }\n\n  for (let c = 8; c < moduleCount - 8; c += 1) {\n    if (modules[6][c] != null) {\n      continue\n    }\n    modules[6][c] = (c % 2 === 0)\n  }\n};\n\n/**\n * @param {boolean} test - flag to determine if it is used for mask pattern evaluation\n * @param {QrCode} qrcode - qr code object\n */\nfunction setupTypeNumber (test, qrcode) {\n  const { typeNumber, modules, moduleCount } = qrcode\n\n  const bits = getBCHTypeNumber(typeNumber)\n\n  for (let i = 0; i < 18; i += 1) {\n    const mod = (!test && ((bits >> i) & 1) === 1)\n    modules[Math.floor(i / 3)][i % 3 + moduleCount - 8 - 3] = mod\n  }\n\n  for (let i = 0; i < 18; i += 1) {\n    const mod = (!test && ((bits >> i) & 1) === 1)\n    modules[i % 3 + moduleCount - 8 - 3][Math.floor(i / 3)] = mod\n  }\n}\n\n/**\n *\n * @param {number[]} data - bit data of qrcode\n * @param {number} maskPattern - mask pattern number\n * @param {QrCode} qrcode - qr code object\n */\n// eslint-disable-next-line sonarjs/cognitive-complexity -- it's low level and simple enough\nfunction mapData (data, maskPattern, qrcode) {\n  const { moduleCount, modules } = qrcode\n\n  let inc = -1\n  let row = moduleCount - 1\n  let bitIndex = 7\n  let byteIndex = 0\n  const maskFunc = getMaskFunction(maskPattern)\n\n  for (let col = moduleCount - 1; col > 0; col -= 2) {\n    if (col === 6) col -= 1\n\n    while (true) {\n      for (let c = 0; c < 2; c += 1) {\n        if (modules[row][col - c] == null) {\n          let dark = false\n\n          if (byteIndex < data.length) {\n            dark = (((data[byteIndex] >>> bitIndex) & 1) === 1)\n          }\n\n          const mask = maskFunc(row, col - c)\n\n          if (mask) {\n            dark = !dark\n          }\n\n          modules[row][col - c] = dark\n          bitIndex -= 1\n\n          if (bitIndex === -1) {\n            byteIndex += 1\n            bitIndex = 7\n          }\n        }\n      }\n\n      row += inc\n\n      if (row < 0 || moduleCount <= row) {\n        row -= inc\n        inc = -inc\n        break\n      }\n    }\n  }\n}\n\n/**\n * Calculates the penalty point of QR Code, used to evaluate the masking results\n *\n * After performing the masking operation with each Mask Pattern in turn, the results shall be evaluated by scoring\n * penalty points for each occurrence of the following features. The higher the number of points, the less acceptable\n * the result. In the table, the variables N1 to N4 represent weighted penalty scores for the undesirable features\n * (N1 = 3, N2 = 3, N3 = 40, N4 = 10), i is the amount by which the number of adjacent modules of the same color exceeds 5\n * and k is the rating of the deviation of the proportion of dark modules in the symbol from 50% in steps of 5%.\n * Although the masking operation is only performed on the encoding region of the symbol excluding the Format\n * Information, the area to be evaluated is the complete symbol\n * @example\n * \u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n * \u2502 Feature                                      \u2502 Evaluation                            \u2502 condition Points        \u2502\n * \u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n * \u2502 Adjacent modules in row/column in same color \u2502  No. of modules = (5 + i)             \u2502  N1 + i                 \u2502\n * \u2502                                              \u2502                                       \u2502                         \u2502\n * \u2502 Block of modules in same color               \u2502  Block size = m * n                   \u2502  N2 * (m - 1) * (n - 1) \u2502\n * \u2502                                              \u2502                                       \u2502                         \u2502\n * \u2502 1:1:3:1:1 ratio (dark:light:dark:light:dark) \u2502                                       \u2502  N3                     \u2502\n * \u2502 pattern in row/column                        \u2502                                       \u2502                         \u2502\n * \u2502                                              \u2502                                       \u2502                         \u2502\n * \u2502 Proportion of dark modules in entire symbol  \u2502  50 \u00B1 (5 * k)% to 50 \u00B1 (5 * (k + 1))% \u2502  N4 * k                 \u2502\n * \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n *                         Evaluation table from ISO/IEC 18004:2000(E) International Standard\n * @param {QrCode} qrcode - qr code object\n * @returns {number} calculated penalty points\n */\n// eslint-disable-next-line max-lines-per-function, sonarjs/cognitive-complexity -- even it we split one function per level, we would have to use eslint-disable in them anyway\nexport function getLostPoint (qrcode) {\n  const { moduleCount, modules } = qrcode\n  /** @type {(r:number, c:number) => boolean} */\n  const isDark = (r, c) => modules[r][c]\n  let lostPoint = 0\n\n  // Feature 1 - Adjacent modules in row/column in same color\n\n  for (let row = 0; row < moduleCount; row += 1) {\n    for (let col = 0; col < moduleCount; col += 1) {\n      let sameCount = 0\n      const dark = isDark(row, col)\n\n      for (let r = -1; r <= 1; r += 1) {\n        if (row + r < 0 || moduleCount <= row + r) {\n          continue\n        }\n\n        for (let c = -1; c <= 1; c += 1) {\n          if (col + c < 0 || moduleCount <= col + c) {\n            continue\n          }\n\n          if (r === 0 && c === 0) {\n            continue\n          }\n\n          if (dark === isDark(row + r, col + c)) {\n            sameCount += 1\n          }\n        }\n      }\n\n      if (sameCount > 5) {\n        lostPoint += (3 + sameCount - 5)\n      }\n    }\n  };\n\n  // Feature 2 - Block of modules in same color\n\n  for (let row = 0; row < moduleCount - 1; row += 1) {\n    for (let col = 0; col < moduleCount - 1; col += 1) {\n      let count = 0\n      if (isDark(row, col)) count += 1\n      if (isDark(row + 1, col)) count += 1\n      if (isDark(row, col + 1)) count += 1\n      if (isDark(row + 1, col + 1)) count += 1\n      if (count === 0 || count === 4) {\n        lostPoint += 3\n      }\n    }\n  }\n\n  // Feature 3 - 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column\n\n  for (let row = 0; row < moduleCount; row += 1) {\n    for (let col = 0; col < moduleCount - 6; col += 1) {\n      if (isDark(row, col) &&\n          !isDark(row, col + 1) &&\n          isDark(row, col + 2) &&\n          isDark(row, col + 3) &&\n          isDark(row, col + 4) &&\n          !isDark(row, col + 5) &&\n          isDark(row, col + 6)) {\n        lostPoint += 40\n      }\n    }\n  }\n\n  for (let col = 0; col < moduleCount; col += 1) {\n    for (let row = 0; row < moduleCount - 6; row += 1) {\n      if (isDark(row, col) &&\n          !isDark(row + 1, col) &&\n          isDark(row + 2, col) &&\n          isDark(row + 3, col) &&\n          isDark(row + 4, col) &&\n          !isDark(row + 5, col) &&\n          isDark(row + 6, col)) {\n        lostPoint += 40\n      }\n    }\n  }\n\n  // Feature 4 - Proportion of dark modules in entire symbol\n\n  let darkCount = 0\n\n  for (let col = 0; col < moduleCount; col += 1) {\n    for (let row = 0; row < moduleCount; row += 1) {\n      if (isDark(row, col)) {\n        darkCount += 1\n      }\n    }\n  }\n\n  const ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5\n  lostPoint += ratio * 10\n\n  return lostPoint\n};\n\n/**\n * @param {boolean} test - flag to determine if it is used for mask pattern evaluation\n * @param {number} maskPattern - mask pattern number\n * @param {QrCode} qrcode - qr code object\n */\nfunction setupTypeInfo (test, maskPattern, qrcode) {\n  const { errorCorrectionLevel, modules, moduleCount } = qrcode\n\n  const data = (errorCorrectionLevel << 3) | maskPattern\n  const bits = getBCHTypeInfo(data)\n\n  // vertical\n  for (let i = 0; i < 15; i += 1) {\n    const mod = (!test && ((bits >> i) & 1) === 1)\n\n    if (i < 6) {\n      modules[i][8] = mod\n    } else if (i < 8) {\n      modules[i + 1][8] = mod\n    } else {\n      modules[moduleCount - 15 + i][8] = mod\n    }\n  }\n\n  // horizontal\n  for (let i = 0; i < 15; i += 1) {\n    const mod = (!test && ((bits >> i) & 1) === 1)\n\n    if (i < 8) {\n      modules[8][moduleCount - i - 1] = mod\n    } else if (i < 9) {\n      modules[8][15 - i - 1 + 1] = mod\n    } else {\n      modules[8][15 - i - 1] = mod\n    }\n  }\n\n  // fixed module\n  modules[moduleCount - 8][8] = (!test)\n};\n", "/**\n *\n * @param {object} opts - function parameters\n * @param {CanvasRenderingContext2D} opts.context - canvas rendering context\n * @param {number} [opts.cellSize] - cell size in pixels, defaults to 2\n * @param {import('../qr-code.js').QrCode} opts.qrcode - QR Code data\n * @param {string} [opts.darkColor] - dark color of QRCode image defaults to black\n * @param {string} [opts.lightColor] - bright color of QRCode image defaults to white\n */\nexport function renderTo2dContext ({ context, cellSize = 2, qrcode, darkColor = 'black', lightColor = 'white' }) {\n  const length = qrcode.moduleCount\n  for (let row = 0; row < length; row++) {\n    const ypos = row * cellSize\n    for (let col = 0; col < length; col++) {\n      context.fillStyle = qrcode.isDark(row, col) ? darkColor : lightColor\n      const xpos = col * cellSize\n      context.fillRect(xpos, ypos, cellSize, cellSize)\n    }\n  }\n}\n", "import { renderTo2dContext } from './canvas-2d-context.render.js'\n\n/**\n *\n * @param {object} opts - function parameters\n * @param {number} [opts.cellSize] - cell size in pixels, defaults to 2\n * @param {number} [opts.margin] - margin in pixels, defaults to {@link cellSize} * 4\n * @param {import('../qr-code.js').QrCode} opts.qrcode - QR Code data\n * @param {string} [opts.darkColor] - dark color of QRCode image defaults to black\n * @param {string} [opts.lightColor] - bright color of QRCode image defaults to white\n * @returns {string} data url of qr code image\n */\nexport function createDataURL ({ cellSize = 2, margin, qrcode, darkColor = 'black', lightColor = 'white' }) {\n  margin ??= cellSize * 4\n\n  const paintSize = qrcode.moduleCount * cellSize\n  const size = paintSize + margin * 2\n  const canvas = document.createElement('canvas')\n  canvas.width = size\n  canvas.height = size\n  const context = /** @type {CanvasRenderingContext2D} */(canvas.getContext('2d'))\n  context.fillStyle = lightColor\n  context.fillRect(0, 0, size, size)\n  context.clearRect(margin, margin, paintSize, paintSize)\n  context.translate(margin, margin)\n  renderTo2dContext({ context, cellSize, qrcode, darkColor, lightColor })\n  return canvas.toDataURL('image/png', 1.0)\n};\n", "/** @type {{[key: string]: string}} */\nconst xmlEscapeMap = {\n  '<': '&lt;',\n  '>': '&gt;',\n  '&': '&amp;',\n  \"'\": '&apos;',\n  '\"': '&quot;',\n}\n\n/**\n * Escapes XML entities characters in `xml` string\n * @param {string} xml - xml to escape\n * @returns {string} escaped xml\n */\nexport function escapeXml (xml) {\n  return xml.replace(/[<>&'\"]/g, c => xmlEscapeMap[c])\n};\n", "import { createDataURL } from './data-url-canvas.render.js'\nimport { escapeXml } from '../utils/escape-xml.util.js'\n\n/**\n * @param {object} opts - function parameters\n * @param {number} [opts.cellSize] - cell size in pixels, defaults to 2\n * @param {number} [opts.margin] - margin in pixels, defaults to {@link cellSize} * 4\n * @param {string} [opts.alt] - image description\n * @param {import('../qr-code.js').QrCode} opts.qrcode - QR Code data\n * @param {string} [opts.darkColor] - dark color of QRCode image defaults to black\n * @param {string} [opts.lightColor] - bright color of QRCode image defaults to white\n * @returns {string} &lt;img> element outer HTML\n */\nexport function createImgTag ({ cellSize, margin, alt, qrcode, darkColor = 'black', lightColor = 'white' }) {\n  cellSize ||= 2\n  margin ??= cellSize * 4\n  const size = qrcode.moduleCount * cellSize + margin * 2\n  const altAttr = alt ? ` alt=\"${escapeXml(alt)}\"` : ''\n  return `<img src=\"${createDataURL({ cellSize, margin, qrcode, darkColor, lightColor })}\" width=\"${size}\" height=\"${size}\"${altAttr}/>`\n};\n", "import { escapeXml } from '../utils/escape-xml.util.js'\n\n/**\n * @param {object} opts - function parameters\n * @param {number} [opts.cellSize] - cell size in pixels, defaults to 2\n * @param {number} [opts.margin] - margin in pixels, defaults to {@link cellSize} * 4\n * @param {string|SvgProp} [opts.alt] - image description\n * @param {string|SvgProp} [opts.title] - image title\n * @param {boolean} [opts.scalable] - flag to make the svg scalable\n * @param {import('../qr-code.js').QrCode} opts.qrcode - QR Code data\n * @param {string} [opts.darkColor] - dark color of QRCode image defaults to black\n * @param {string} [opts.lightColor] - light color of QRCode image defaults to white\n * @returns {string} &lt;svg> element outer HTML\n */\nexport function createSvgTag ({ cellSize, margin, alt, title, qrcode, scalable, darkColor = 'black', lightColor = 'white' }) {\n  const { moduleCount } = qrcode\n\n  cellSize ||= 2\n  margin ??= cellSize * 4\n\n  const titleProp = normalizeTitle(title)\n  const altProp = normalizeAlt(alt)\n\n  const paintSize = moduleCount * cellSize\n  const size = paintSize + margin * 2\n\n  let qrSvg = '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"'\n  qrSvg += !scalable ? ' width=\"' + size + 'px\" height=\"' + size + 'px\"' : ''\n  qrSvg += ' viewBox=\"0 0 ' + size + ' ' + size + '\" preserveAspectRatio=\"xMinYMin meet\"'\n  qrSvg += ' shape-rendering=\"crispEdges\"' // disables anti-aliasing, without it, a line between the QR Code paint area and the margin will appear\n  qrSvg += a11yAttributes(titleProp, altProp) + '>'\n  qrSvg += (titleProp.text) ? '<title id=\"' + escapeXml(titleProp.id) + '\">' + escapeXml(titleProp.text) + '</title>' : ''\n  qrSvg += (altProp.text) ? '<description id=\"' + escapeXml(altProp.id) + '\">' + escapeXml(altProp.text) + '</description>' : ''\n  qrSvg += `<g stroke=\"none\" fill=\"${lightColor}\">`\n  qrSvg += `<path d=\"M0,0h${size}v${size}h-${size}zM${margin},${margin}v${paintSize}h${paintSize}v-${paintSize}z\"/>`\n  qrSvg += `<path d=\"${pathData({ cellSize, margin, qrcode, paintDarkColor: false })}\"/>`\n  qrSvg += `<path d=\"${pathData({ cellSize, margin, qrcode, paintDarkColor: true })}\" fill=\"${darkColor}\"/>`\n  qrSvg += '</g></svg>'\n\n  return qrSvg\n};\n\n/**\n * @param {object} opts - funtion parameters\n * @param {number} opts.cellSize - cell size in pixels\n * @param {number} opts.margin - margin in pixels\n * @param {import('../qr-code.js').QrCode} opts.qrcode - QR Code data\n * @param {boolean} opts.paintDarkColor - flag paint dark or bright color\n * @returns {string} &lt;path> `d` attribute value\n */\nfunction pathData ({ cellSize, margin, qrcode, paintDarkColor }) {\n  const { moduleCount } = qrcode\n\n  let d = ''\n  const rect = `h${cellSize}v${cellSize}h-${cellSize}z`\n\n  for (let row = 0; row < moduleCount; row += 1) {\n    const mr = row * cellSize + margin\n    for (let col = 0; col < moduleCount; col += 1) {\n      if (qrcode.isDark(row, col) === paintDarkColor) {\n        const mc = col * cellSize + margin\n        d += `M${mc},${mr}${rect}`\n      }\n    }\n  }\n  return d\n}\n\n/**\n * @param {Required<SvgProp>} title - qr code title\n * @param {Required<SvgProp>} alt - qr code alt\n * @returns {string} acessibility attributes or empty string if empty `title` and `alt`\n */\nconst a11yAttributes = (title, alt) => (title.text || alt.text) ? ' role=\"img\" aria-labelledby=\"' + escapeXml([title.id, alt.id].join(' ').trim()) + '\"' : ''\n\n/**\n * @param {string|SvgProp} [alt] - qr code alt\n * @returns {Required<SvgProp>} Composed alt property surrogate\n */\nconst normalizeAlt = (alt) => {\n  const result = (typeof alt === 'string') ? { text: alt, id: '' } : { text: '', id: '', ...alt }\n  result.id = result.id || 'qrcode-description'\n  return result\n}\n\n/**\n * Compose title property surrogate\n * @param {string|SvgProp} [title] - qr code title\n * @returns {Required<SvgProp>} Composed title property surrogate\n */\nconst normalizeTitle = (title) => {\n  const result = (typeof title === 'string') ? { text: title, id: '' } : { text: '', id: '', ...title }\n  result.id = result.id || 'qrcode-title'\n  return result\n}\n\n/**\n * @typedef {object} SvgProp\n * @property {string} text - attribute text\n * @property {string} [id] - title tag id\n */\n", "// generated code from src/web-component/qr-code.element.css\nvar stdin_default = \":host{display:inline-flex;justify-content:center}svg,img{align-self:center;max-height:100%}\\n\";\nexport {\n  stdin_default as default\n};\n", "import { QrCode } from '../qr-code.js'\nimport { createImgTag } from '../render/img-tag.render.js'\nimport { createSvgTag } from '../render/svg.render.js'\nimport { isValid } from '../error-correction/ec-level.js'\nimport css from './qr-code.element.css.generated.js'\n\nlet loadStyles = () => {\n  const sheet = new CSSStyleSheet()\n  sheet.replaceSync(css)\n  loadStyles = () => sheet\n  return sheet\n}\n\nexport class QRCodeElement extends HTMLElement {\n  constructor () {\n    super()\n    const shadowRoot = this.attachShadow({ mode: 'open' })\n    shadowRoot.adoptedStyleSheets = [loadStyles()]\n    observer.observe(this, observerOptions)\n  }\n\n  connectedCallback () {\n    applyQrCode(this)\n  }\n\n  get errorCorrectionLevel () {\n    const errorCorrectionLevelAttr = this.getAttribute('data-error-correction-level')\n    return errorCorrectionLevelAttr && isValid(errorCorrectionLevelAttr) ? errorCorrectionLevelAttr : 'Medium'\n  }\n}\n\n/** @type {MutationObserverInit} */\nconst observerOptions = {\n  characterData: true,\n  characterDataOldValue: true,\n  childList: true,\n  attributes: true,\n  subtree: true,\n}\nconst observer = new MutationObserver((records) => {\n  const updatedNodes = new Set()\n  for (const record of records) {\n    const { target } = record\n    if (target instanceof QRCodeElement) {\n      updatedNodes.add(target)\n    } else if (target.nodeType === Node.TEXT_NODE && target.parentElement instanceof QRCodeElement) {\n      updatedNodes.add(target.parentElement)\n    }\n  }\n  updatedNodes.forEach(el => el instanceof QRCodeElement && applyQrCode(el))\n})\n\n/**\n * @param {QRCodeElement} element - target QRCodeElement component element\n */\nfunction applyQrCode (element) {\n  const typeNumber = 0\n\n  const { shadowRoot } = element\n  if (!shadowRoot) {\n    return\n  }\n\n  const { textContent } = element\n  if (!textContent) {\n    return\n  }\n\n  const qr = new QrCode(typeNumber, element.errorCorrectionLevel)\n  qr.addData(textContent)\n  qr.make()\n\n  const darkColor = getComputedStyle(element).getPropertyValue('--qrcode-dark-color') || 'black'\n  const lightColor = getComputedStyle(element).getPropertyValue('--qrcode-light-color') || 'white'\n\n  const renderMode = getRenderMode(element)\n  if (renderMode === 'svg') {\n    const svg = createSvgTag({ qrcode: qr, darkColor, lightColor, scalable: isResizeEnabled(element) })\n    shadowRoot.innerHTML = svg\n    return\n  }\n\n  const imgHtml = createImgTag({ qrcode: qr, darkColor, lightColor })\n  const oldImgElement = shadowRoot.querySelector('img')\n  if (oldImgElement) {\n    const updated = updateImgElement(oldImgElement, imgHtml)\n    if (updated) {\n      return\n    }\n  }\n  shadowRoot.innerHTML = imgHtml\n}\n\n/**\n * Updates the image element, replacing the element with another &lt;img> will make the browser flash and re-render twice,\n * one for the updated HTML without the previous image, as it is loading, and another time with the loaded image, this\n * will make it update once without flash\n * @param {HTMLImageElement} imageElement - target &lt;img> element\n * @param {string} imgHtml img rendered with {@link createImgTag}\n * @returns {boolean} true if updated correctly, false if something failed. If false, applyQrCode() will fallback to replace the &lt;img>\n */\nfunction updateImgElement (imageElement, imgHtml) {\n  const imgDom = new DOMParser().parseFromString(imgHtml, 'text/html').querySelector('img')\n  if (!imgDom) {\n    return false\n  }\n  imageElement.src = imgDom.src\n  imageElement.width = imgDom.width\n  imageElement.height = imgDom.height\n  return true\n}\n\n/**\n * Gets the render mode to be used:\n *  - if mode is \"raster\", it will render the qrcode as an rasterized image\n *  - if mode is \"svg\", it will render the qrcode as a scalable image using SVG\n * @param {QRCodeElement} element - target qr code element\n * @returns {\"raster\"|\"svg\"} render mode\n */\nfunction getRenderMode (element) {\n  const renderModeCss = (getComputedStyle(element).getPropertyValue('--qrcode-render') || '').trim().toLowerCase()\n  if (renderModeCss === 'svg') return 'svg'\n  if (renderModeCss === 'raster') return 'raster'\n  if (isResizeEnabled(element)) return 'svg'\n  return 'raster'\n}\n\n/**\n * @param {QRCodeElement} element - target qr code element\n * @returns {boolean} true if resize enabled\n */\nfunction isResizeEnabled (element) {\n  const resizeCss = (getComputedStyle(element).getPropertyValue('--qrcode-resize') || '').trim().toLowerCase()\n  return resizeCss === 'true' || resizeCss === 'yes' || resizeCss === 'enabled' || resizeCss === 'enable'\n}\n", "import { QRCodeElement as Element } from '../web-component/qr-code.element.js'\nexport { QrCode } from '../qr-code.js'\n\nconst url = new URL(import.meta.url)\nconst elementName = url.searchParams.get('named')\nif (elementName) {\n  if (customElements.get(elementName) != null) {\n    console.error(`A custom element with name \"${elementName}\" already exists`)\n  } else {\n    customElements.define(elementName, Element)\n  }\n}\n\nexport const QRCodeElement = Element\nexport default QRCodeElement\n"],
  "mappings": "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GAAI,GAAI,GAAI,EAAE,EAAG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EACxG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAAG,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,GAAG,EAAG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAAG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EACxG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAAG,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,GAAG,EAAG,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAAE,EAAI,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAAE,EACvG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAAG,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,GAAG,EAAG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAAG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EACxG,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,EAAE,EAAI,CAAC,EAAG,IAAK,IAAK,GAAI,IAAK,GAAG,EAAG,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,EAAE,EAAI,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EACxG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAAG,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,GAAG,EAAG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAAG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EACxG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAAG,CAAC,EAAG,IAAK,IAAK,GAAI,IAAK,GAAG,EAAG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAAG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EACxG,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAAE,EAAI,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,GAAG,EAAG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAAG,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EACxG,CAAC,GA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",
  "names": ["deepFreeze", "x", "EC_BLOCK_TABLE", "deepFreeze", "correctionLevelNames", "correctionLevelMap", "acc", "name", "bit", "result", "fromString", "string", "validKeys", "idx", "isValid", "ECBlock", "totalCount", "dataCount", "queryECBlocks", "typeNumber", "errorCorrectionLevel", "index", "rawEcBlock", "EC_BLOCK_TABLE", "length", "list", "i", "count", "j", "buildECBlocksInfo", "blocks", "totalDcCount", "totalEcCount", "maxDcCount", "maxEcCount", "block", "memoEcBlockInfo", "ECBlocksInfo", "versionEcCheck", "memo", "result", "PATTERN_POSITION_TABLE", "deepFreeze", "getBCHDigit", "data", "digit", "G15", "G18", "G15_MASK", "getBCHTypeInfo", "d", "getBCHTypeNumber", "getPatternPosition", "typeNumber", "PATTERN_POSITION_TABLE", "maskPatternFunctions", "i", "j", "_", "getMaskFunction", "maskPattern", "result", "getLengthInBits", "mode", "type", "QrBitBuffer", "#byteBuffer", "#bitLength", "num", "length", "byteBuffer", "bitLength", "newBitLength", "newBufferLenght", "restBits", "bufIndex", "i", "shiftLeft", "index", "bit", "EXP_TABLE", "LOG_TABLE", "i", "glog", "n", "gexp", "QRPolynomial", "_QRPolynomial", "num", "shift", "offset", "numLen", "lengthAfterOffset", "array", "i", "index", "other", "length", "otherLength", "otherArray", "j", "gexp", "glog", "ratio", "QrPolynomial", "memoECPolynomials", "QrPolynomial", "getErrorCorrectPolynomial", "errorCorrectLength", "lastIndex", "polynomial", "i", "gexp", "PAD0", "PAD1", "createData", "typeNumber", "errorCorrectionLevel", "dataList", "blocksInfo", "ECBlocksInfo", "buffer", "QrBitBuffer", "data", "getLengthInBits", "totalDataCount", "createBytes", "maxDcCount", "maxEcCount", "ecBlocks", "totalCodeCount", "ecdata", "dcdata", "createCodewordsData", "index", "i", "r", "offset", "dcCount", "ecCount", "e", "rsPoly", "getErrorCorrectPolynomial", "modPoly", "QrPolynomial", "modIndex", "utf8_to_jis_table_constants_default", "xInt", "x", "b64Int", "base64ToHex", "decompressUtf8ToJisTable", "compressedTable", "result", "jisChar", "utf8ValsStr", "utf8Vals", "charIterator", "utf8Value", "key", "kv", "init", "i", "e", "usingTable", "generatedTable", "getUtf8ToJisTable", "utf8_to_jis_table_constants_default", "encoder", "decoder", "sjisDecoder", "textToBytes", "str", "base64ToBytes", "base64", "m", "base64ToHex", "base64", "bytesToHex", "base64ToBytes", "bytesToHex", "bytes", "byte", "textToSjisBytes", "str", "UTF8ToSJIS", "textToBytes", "UTF8ToSJIS", "data", "UTF8_TO_JIS_TABLE", "getUtf8ToJisTable", "results", "len", "b1", "b2", "utf8", "jis", "i", "b", "QrKanji", "data", "bytes", "textToSjisBytes", "writeDataToBitBuffer", "buffer", "i", "c", "getValidQrKanjiOrNull", "text", "modeObject", "Qr8BitByte", "data", "writeDataToBitBuffer", "textToBytes", "buffer", "byte", "QrNumber", "data", "writeDataToBitBuffer", "buffer", "i", "strToNum", "s", "num", "e", "charToNum", "c", "zeroCharCode", "QrAlphaNum", "data", "writeDataToBitBuffer", "buffer", "i", "getCode", "c", "getBestMode", "data", "QrNumber", "QrAlphaNum", "getValidQrKanjiOrNull", "Qr8BitByte", "QrCode", "#dataCache", "typeNumber", "errorCorrectionLevel", "fromString", "createModuleTable", "test", "maskPattern", "moduleCount", "setupPositionProbePatterns", "setupPositionAdjustPattern", "setupTimingPattern", "setupTypeInfo", "setupTypeNumber", "createData", "mapData", "row", "col", "modules", "data", "mode", "QrNumber", "QrAlphaNum", "Qr8BitByte", "QrKanji", "getBestMode", "getBestTypeNumber", "getBestMaskPattern", "qrcode", "drawPositionProbePattern", "rowMin", "rowMax", "colMin", "colMax", "r", "c", "isDarkSpot", "dataList", "ecBlocksInfo", "ECBlocksInfo", "buffer", "QrBitBuffer", "i", "getLengthInBits", "minLostPoint", "pattern", "lostPoint", "getLostPoint", "pos", "getPatternPosition", "j", "paintAlignmentPattern", "bits", "getBCHTypeNumber", "mod", "inc", "bitIndex", "byteIndex", "maskFunc", "getMaskFunction", "dark", "isDark", "sameCount", "count", "darkCount", "ratio", "getBCHTypeInfo", "renderTo2dContext", "context", "cellSize", "qrcode", "darkColor", "lightColor", "length", "row", "ypos", "col", "xpos", "createDataURL", "cellSize", "margin", "qrcode", "darkColor", "lightColor", "paintSize", "size", "canvas", "context", "renderTo2dContext", "xmlEscapeMap", "escapeXml", "xml", "c", "createImgTag", "cellSize", "margin", "alt", "qrcode", "darkColor", "lightColor", "size", "altAttr", "escapeXml", "createDataURL", "createSvgTag", "cellSize", "margin", "alt", "title", "qrcode", "scalable", "darkColor", "lightColor", "moduleCount", "titleProp", "normalizeTitle", "altProp", "normalizeAlt", "paintSize", "size", "qrSvg", "a11yAttributes", "escapeXml", "pathData", "paintDarkColor", "d", "rect", "row", "mr", "col", "mc", "result", "stdin_default", "loadStyles", "sheet", "stdin_default", "QRCodeElement", "shadowRoot", "observer", "observerOptions", "applyQrCode", "errorCorrectionLevelAttr", "isValid", "records", "updatedNodes", "record", "target", "el", "element", "textContent", "qr", "QrCode", "darkColor", "lightColor", "getRenderMode", "svg", "createSvgTag", "isResizeEnabled", "imgHtml", "createImgTag", "oldImgElement", "updateImgElement", "imageElement", "imgDom", "renderModeCss", "resizeCss", "url", "elementName", "QRCodeElement", "browser_default"]
}
